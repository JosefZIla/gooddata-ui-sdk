// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`getEmbeddingCode functionality should generate code for AreaChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newMeasure(idRef(\\"abYgDBRagANw\\", \\"measure\\"), m => m.localId(\\"m_abYgDBRagANw\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"))
];
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newMeasure(idRef(\\"abYgDBRagANw\\", \\"measure\\"), m => m.localId(\\"m_abYgDBRagANw\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"))
];
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newMeasure(idRef(\\"abYgDBRagANw\\", \\"measure\\"), m => m.localId(\\"m_abYgDBRagANw\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"))
];
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newMeasure(idRef(\\"abYgDBRagANw\\", \\"measure\\"), m => m.localId(\\"m_abYgDBRagANw\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"))
];
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newMeasure(idRef(\\"abYgDBRagANw\\", \\"measure\\"), m => m.localId(\\"m_abYgDBRagANw\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"))
];
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newMeasure(idRef(\\"abYgDBRagANw\\", \\"measure\\"), m => m.localId(\\"m_abYgDBRagANw\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"))
];
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newMeasure(idRef(\\"abYgDBRagANw\\", \\"measure\\"), m => m.localId(\\"m_abYgDBRagANw\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"))
];
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newMeasure(idRef(\\"abYgDBRagANw\\", \\"measure\\"), m => m.localId(\\"m_abYgDBRagANw\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"))
];
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newMeasure(idRef(\\"abYgDBRagANw\\", \\"measure\\"), m => m.localId(\\"m_abYgDBRagANw\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"))
];
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newMeasure(idRef(\\"abYgDBRagANw\\", \\"measure\\"), m => m.localId(\\"m_abYgDBRagANw\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"))
];
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newMeasure(idRef(\\"abYgDBRagANw\\", \\"measure\\"), m => m.localId(\\"m_abYgDBRagANw\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"))
];
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newMeasure(idRef(\\"abYgDBRagANw\\", \\"measure\\"), m => m.localId(\\"m_abYgDBRagANw\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"))
];
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newMeasure(idRef(\\"abYgDBRagANw\\", \\"measure\\"), m => m.localId(\\"m_abYgDBRagANw\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"))
];
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newMeasure(idRef(\\"abYgDBRagANw\\", \\"measure\\"), m => m.localId(\\"m_abYgDBRagANw\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"))
];
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newMeasure(idRef(\\"abYgDBRagANw\\", \\"measure\\"), m => m.localId(\\"m_abYgDBRagANw\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"))
];
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newMeasure(idRef(\\"abYgDBRagANw\\", \\"measure\\"), m => m.localId(\\"m_abYgDBRagANw\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"))
];
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newMeasure(idRef(\\"abYgDBRagANw\\", \\"measure\\"), m => m.localId(\\"m_abYgDBRagANw\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"))
];
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newMeasure(idRef(\\"abYgDBRagANw\\", \\"measure\\"), m => m.localId(\\"m_abYgDBRagANw\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"))
];
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newMeasure(idRef(\\"abYgDBRagANw\\", \\"measure\\"), m => m.localId(\\"m_abYgDBRagANw\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"))
];
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newMeasure(idRef(\\"abYgDBRagANw\\", \\"measure\\"), m => m.localId(\\"m_abYgDBRagANw\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"))
];
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - 610x154 - Force position RIGHT - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newMeasure(idRef(\\"abYgDBRagANw\\", \\"measure\\"), m => m.localId(\\"m_abYgDBRagANw\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"))
];
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - 610x154 - Force position RIGHT - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newMeasure(idRef(\\"abYgDBRagANw\\", \\"measure\\"), m => m.localId(\\"m_abYgDBRagANw\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"))
];
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - 610x154 - Force position RIGHT - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newMeasure(idRef(\\"abYgDBRagANw\\", \\"measure\\"), m => m.localId(\\"m_abYgDBRagANw\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"))
];
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - 610x154 - Force position RIGHT - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newMeasure(idRef(\\"abYgDBRagANw\\", \\"measure\\"), m => m.localId(\\"m_abYgDBRagANw\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"))
];
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - 610x154 - Force position RIGHT - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newMeasure(idRef(\\"abYgDBRagANw\\", \\"measure\\"), m => m.localId(\\"m_abYgDBRagANw\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"))
];
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newMeasure(idRef(\\"abYgDBRagANw\\", \\"measure\\"), m => m.localId(\\"m_abYgDBRagANw\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"))
];
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newMeasure(idRef(\\"abYgDBRagANw\\", \\"measure\\"), m => m.localId(\\"m_abYgDBRagANw\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"))
];
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newMeasure(idRef(\\"abYgDBRagANw\\", \\"measure\\"), m => m.localId(\\"m_abYgDBRagANw\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"))
];
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newMeasure(idRef(\\"abYgDBRagANw\\", \\"measure\\"), m => m.localId(\\"m_abYgDBRagANw\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"))
];
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newMeasure(idRef(\\"abYgDBRagANw\\", \\"measure\\"), m => m.localId(\\"m_abYgDBRagANw\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"))
];
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newMeasure(idRef(\\"abYgDBRagANw\\", \\"measure\\"), m => m.localId(\\"m_abYgDBRagANw\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"))
];
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newMeasure(idRef(\\"abYgDBRagANw\\", \\"measure\\"), m => m.localId(\\"m_abYgDBRagANw\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"))
];
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newMeasure(idRef(\\"abYgDBRagANw\\", \\"measure\\"), m => m.localId(\\"m_abYgDBRagANw\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"))
];
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newMeasure(idRef(\\"abYgDBRagANw\\", \\"measure\\"), m => m.localId(\\"m_abYgDBRagANw\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"))
];
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newMeasure(idRef(\\"abYgDBRagANw\\", \\"measure\\"), m => m.localId(\\"m_abYgDBRagANw\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"))
];
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newMeasure(idRef(\\"abYgDBRagANw\\", \\"measure\\"), m => m.localId(\\"m_abYgDBRagANw\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"))
];
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newMeasure(idRef(\\"abYgDBRagANw\\", \\"measure\\"), m => m.localId(\\"m_abYgDBRagANw\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"))
];
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newMeasure(idRef(\\"abYgDBRagANw\\", \\"measure\\"), m => m.localId(\\"m_abYgDBRagANw\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"))
];
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newMeasure(idRef(\\"abYgDBRagANw\\", \\"measure\\"), m => m.localId(\\"m_abYgDBRagANw\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"))
];
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newMeasure(idRef(\\"abYgDBRagANw\\", \\"measure\\"), m => m.localId(\\"m_abYgDBRagANw\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"))
];
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - Y axis configuration 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {yaxis: {max: \\"25000000\\", min: \\"5000000\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - arithmetic measures 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - coloring - custom palette 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - data labels - auto visibility 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {dataLabels: {visible: \\"auto\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - data labels - default 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - data labels - forced hidden 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {dataLabels: {visible: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - data labels - forced visible 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {dataLabels: {visible: true}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - data labels - forced visible and german separators 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {dataLabels: {visible: true}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - data points - dense chart - auto visibility 1`] = `
"import React from \\"react\\";
import { idRef, localIdRef, newAttribute, newMeasure, newMeasureValueFilter } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.opportunity.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.opportunity.id.name\\"))
];
const filters = [
    newMeasureValueFilter(localIdRef(\\"m_aangOxLSeztu\\"), \\"GREATER_THAN\\", 100000)
];
const config = {dataPoints: {visible: \\"auto\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - data points - dense chart - default 1`] = `
"import React from \\"react\\";
import { idRef, localIdRef, newAttribute, newMeasure, newMeasureValueFilter } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.opportunity.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.opportunity.id.name\\"))
];
const filters = [
    newMeasureValueFilter(localIdRef(\\"m_aangOxLSeztu\\"), \\"GREATER_THAN\\", 100000)
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                filters={filters}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - data points - dense chart - forced hidden 1`] = `
"import React from \\"react\\";
import { idRef, localIdRef, newAttribute, newMeasure, newMeasureValueFilter } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.opportunity.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.opportunity.id.name\\"))
];
const filters = [
    newMeasureValueFilter(localIdRef(\\"m_aangOxLSeztu\\"), \\"GREATER_THAN\\", 100000)
];
const config = {dataPoints: {visible: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - data points - dense chart - forced visible 1`] = `
"import React from \\"react\\";
import { idRef, localIdRef, newAttribute, newMeasure, newMeasureValueFilter } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.opportunity.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.opportunity.id.name\\"))
];
const filters = [
    newMeasureValueFilter(localIdRef(\\"m_aangOxLSeztu\\"), \\"GREATER_THAN\\", 100000)
];
const config = {dataPoints: {visible: true}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - data points - sparse chart - auto visibility 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {dataPoints: {visible: \\"auto\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - data points - sparse chart - default 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - data points - sparse chart - forced hidden 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {dataPoints: {visible: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - data points - sparse chart - forced visible 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {dataPoints: {visible: true}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - font 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - legend position - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {legend: {position: \\"auto\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - legend position - disabled 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {legend: {enabled: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - legend position - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {legend: {position: \\"bottom\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - legend position - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {legend: {position: \\"left\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - legend position - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {legend: {position: \\"right\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - legend position - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {legend: {position: \\"top\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - single measure 1`] = `
"import React from \\"react\\";
import { idRef, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - single measure with two viewBy 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const stackBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - single measure with viewBy 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - single measure with viewBy and stack to percent 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {stackMeasuresToPercent: true};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - single measure with viewBy and stackBy 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const stackBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - single measure with viewBy and stackBy and disabled stacking 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const stackBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - single measure with viewBy and stackBy and stack to percent 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const stackBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const config = {stackMeasuresToPercent: true};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - single measure with viewBy and stackBy and stack to percent with labels 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const stackBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const config = {
    dataLabels: {visible: true},
    stackMeasuresToPercent: true
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - themed 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - two measures with undefined values 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"closed.aag81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_closed.aag81lMifn6q\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - two measures with viewBy 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - two measures with viewBy and disabled stack measures 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {stackMeasures: false};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - two measures with viewBy and disabled stacking 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - two measures with viewBy and enabled stack measures 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {stackMeasures: true};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - two measures with viewBy and enabled stacking 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - two measures with viewBy and stack measures to percent 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {stackMeasuresToPercent: true};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - two measures with viewBy sorted by attribute 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newAttributeSort, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const sortBy = [
    newAttributeSort(\\"a_label.product.id.name\\", \\"desc\\")
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - two measures with viewBy sorted by measure 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newMeasureSort } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const sortBy = [newMeasureSort(\\"m_acugFHNJgsBy\\", \\"asc\\", [])];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - undefined values and disabled stacking 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"closed.aag81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_closed.aag81lMifn6q\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for AreaChart - with one measure and view by date and stack by date 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { AreaChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"closed.aag81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_closed.aag81lMifn6q\\"))
];
const stackBy = newAttribute(idRef(\\"created.aag81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aag81lMifn6q\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <AreaChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - 100x70 - without x axis, without y axis (very small container) 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const stackBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const config = {legend: {enabled: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - 120x354 - without y axis labels 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const stackBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const config = {legend: {enabled: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - 165x354 - without y axis title 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const stackBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const config = {legend: {enabled: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newPositiveAttributeFilter } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const stackBy = newAttribute(idRef(\\"label.account.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.account.id.name\\"));
const filters = [
    newPositiveAttributeFilter(idRef(\\"label.account.id.name\\", \\"displayForm\\"), {
    uris: [
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1426\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1427\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2872\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2873\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1428\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2874\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2871\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2875\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1429\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2876\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1430\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1432\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1431\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1433\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1434\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1435\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2877\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2878\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1436\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1437\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2879\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2880\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1438\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2881\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1439\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1440\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=9\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2882\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1441\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=10\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4513\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4514\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2888\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=13\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4672\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=14\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2889\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=16\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1446\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=15\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1447\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4515\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1448\\"
    ]
})
];
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newPositiveAttributeFilter } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const stackBy = newAttribute(idRef(\\"label.account.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.account.id.name\\"));
const filters = [
    newPositiveAttributeFilter(idRef(\\"label.account.id.name\\", \\"displayForm\\"), {
    uris: [
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1426\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1427\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2872\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2873\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1428\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2874\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2871\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2875\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1429\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2876\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1430\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1432\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1431\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1433\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1434\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1435\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2877\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2878\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1436\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1437\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2879\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2880\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1438\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2881\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1439\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1440\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=9\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2882\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1441\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=10\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4513\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4514\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2888\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=13\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4672\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=14\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2889\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=16\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1446\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=15\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1447\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4515\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1448\\"
    ]
})
];
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newPositiveAttributeFilter } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const stackBy = newAttribute(idRef(\\"label.account.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.account.id.name\\"));
const filters = [
    newPositiveAttributeFilter(idRef(\\"label.account.id.name\\", \\"displayForm\\"), {
    uris: [
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1426\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1427\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2872\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2873\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1428\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2874\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2871\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2875\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1429\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2876\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1430\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1432\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1431\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1433\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1434\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1435\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2877\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2878\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1436\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1437\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2879\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2880\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1438\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2881\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1439\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1440\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=9\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2882\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1441\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=10\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4513\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4514\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2888\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=13\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4672\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=14\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2889\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=16\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1446\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=15\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1447\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4515\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1448\\"
    ]
})
];
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newPositiveAttributeFilter } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const stackBy = newAttribute(idRef(\\"label.account.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.account.id.name\\"));
const filters = [
    newPositiveAttributeFilter(idRef(\\"label.account.id.name\\", \\"displayForm\\"), {
    uris: [
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1426\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1427\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2872\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2873\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1428\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2874\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2871\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2875\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1429\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2876\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1430\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1432\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1431\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1433\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1434\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1435\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2877\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2878\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1436\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1437\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2879\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2880\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1438\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2881\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1439\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1440\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=9\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2882\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1441\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=10\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4513\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4514\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2888\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=13\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4672\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=14\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2889\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=16\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1446\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=15\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1447\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4515\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1448\\"
    ]
})
];
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newPositiveAttributeFilter } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const stackBy = newAttribute(idRef(\\"label.account.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.account.id.name\\"));
const filters = [
    newPositiveAttributeFilter(idRef(\\"label.account.id.name\\", \\"displayForm\\"), {
    uris: [
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1426\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1427\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2872\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2873\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1428\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2874\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2871\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2875\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1429\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2876\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1430\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1432\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1431\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1433\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1434\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1435\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2877\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2878\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1436\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1437\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2879\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2880\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1438\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2881\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1439\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1440\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=9\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2882\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1441\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=10\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4513\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4514\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2888\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=13\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4672\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=14\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2889\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=16\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1446\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=15\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1447\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4515\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1448\\"
    ]
})
];
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newPositiveAttributeFilter } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const stackBy = newAttribute(idRef(\\"label.account.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.account.id.name\\"));
const filters = [
    newPositiveAttributeFilter(idRef(\\"label.account.id.name\\", \\"displayForm\\"), {
    uris: [
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1426\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1427\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2872\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2873\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1428\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2874\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2871\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2875\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1429\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2876\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1430\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1432\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1431\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1433\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1434\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1435\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2877\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2878\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1436\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1437\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2879\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2880\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1438\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2881\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1439\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1440\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=9\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2882\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1441\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=10\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4513\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4514\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2888\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=13\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4672\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=14\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2889\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=16\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1446\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=15\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1447\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4515\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1448\\"
    ]
})
];
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newPositiveAttributeFilter } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const stackBy = newAttribute(idRef(\\"label.account.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.account.id.name\\"));
const filters = [
    newPositiveAttributeFilter(idRef(\\"label.account.id.name\\", \\"displayForm\\"), {
    uris: [
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1426\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1427\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2872\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2873\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1428\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2874\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2871\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2875\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1429\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2876\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1430\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1432\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1431\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1433\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1434\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1435\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2877\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2878\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1436\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1437\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2879\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2880\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1438\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2881\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1439\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1440\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=9\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2882\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1441\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=10\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4513\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4514\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2888\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=13\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4672\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=14\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2889\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=16\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1446\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=15\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1447\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4515\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1448\\"
    ]
})
];
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newPositiveAttributeFilter } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const stackBy = newAttribute(idRef(\\"label.account.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.account.id.name\\"));
const filters = [
    newPositiveAttributeFilter(idRef(\\"label.account.id.name\\", \\"displayForm\\"), {
    uris: [
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1426\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1427\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2872\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2873\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1428\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2874\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2871\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2875\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1429\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2876\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1430\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1432\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1431\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1433\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1434\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1435\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2877\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2878\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1436\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1437\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2879\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2880\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1438\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2881\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1439\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1440\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=9\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2882\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1441\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=10\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4513\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4514\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2888\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=13\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4672\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=14\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2889\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=16\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1446\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=15\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1447\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4515\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1448\\"
    ]
})
];
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newPositiveAttributeFilter } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const stackBy = newAttribute(idRef(\\"label.account.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.account.id.name\\"));
const filters = [
    newPositiveAttributeFilter(idRef(\\"label.account.id.name\\", \\"displayForm\\"), {
    uris: [
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1426\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1427\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2872\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2873\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1428\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2874\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2871\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2875\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1429\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2876\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1430\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1432\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1431\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1433\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1434\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1435\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2877\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2878\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1436\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1437\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2879\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2880\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1438\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2881\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1439\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1440\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=9\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2882\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1441\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=10\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4513\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4514\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2888\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=13\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4672\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=14\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2889\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=16\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1446\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=15\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1447\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4515\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1448\\"
    ]
})
];
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newPositiveAttributeFilter } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const stackBy = newAttribute(idRef(\\"label.account.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.account.id.name\\"));
const filters = [
    newPositiveAttributeFilter(idRef(\\"label.account.id.name\\", \\"displayForm\\"), {
    uris: [
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1426\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1427\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2872\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2873\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1428\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2874\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2871\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2875\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1429\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2876\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1430\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1432\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1431\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1433\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1434\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1435\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2877\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2878\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1436\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1437\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2879\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2880\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1438\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2881\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1439\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1440\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=9\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2882\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1441\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=10\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4513\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4514\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2888\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=13\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4672\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=14\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2889\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=16\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1446\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=15\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1447\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4515\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1448\\"
    ]
})
];
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newPositiveAttributeFilter } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const stackBy = newAttribute(idRef(\\"label.account.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.account.id.name\\"));
const filters = [
    newPositiveAttributeFilter(idRef(\\"label.account.id.name\\", \\"displayForm\\"), {
    uris: [
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1426\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1427\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2872\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2873\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1428\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2874\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2871\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2875\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1429\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2876\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1430\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1432\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1431\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1433\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1434\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1435\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2877\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2878\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1436\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1437\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2879\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2880\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1438\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2881\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1439\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1440\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=9\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2882\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1441\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=10\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4513\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4514\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2888\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=13\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4672\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=14\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2889\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=16\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1446\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=15\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1447\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4515\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1448\\"
    ]
})
];
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newPositiveAttributeFilter } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const stackBy = newAttribute(idRef(\\"label.account.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.account.id.name\\"));
const filters = [
    newPositiveAttributeFilter(idRef(\\"label.account.id.name\\", \\"displayForm\\"), {
    uris: [
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1426\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1427\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2872\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2873\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1428\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2874\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2871\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2875\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1429\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2876\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1430\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1432\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1431\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1433\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1434\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1435\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2877\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2878\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1436\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1437\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2879\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2880\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1438\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2881\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1439\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1440\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=9\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2882\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1441\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=10\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4513\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4514\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2888\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=13\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4672\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=14\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2889\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=16\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1446\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=15\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1447\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4515\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1448\\"
    ]
})
];
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newPositiveAttributeFilter } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const stackBy = newAttribute(idRef(\\"label.account.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.account.id.name\\"));
const filters = [
    newPositiveAttributeFilter(idRef(\\"label.account.id.name\\", \\"displayForm\\"), {
    uris: [
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1426\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1427\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2872\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2873\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1428\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2874\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2871\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2875\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1429\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2876\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1430\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1432\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1431\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1433\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1434\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1435\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2877\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2878\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1436\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1437\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2879\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2880\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1438\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2881\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1439\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1440\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=9\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2882\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1441\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=10\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4513\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4514\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2888\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=13\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4672\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=14\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2889\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=16\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1446\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=15\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1447\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4515\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1448\\"
    ]
})
];
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newPositiveAttributeFilter } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const stackBy = newAttribute(idRef(\\"label.account.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.account.id.name\\"));
const filters = [
    newPositiveAttributeFilter(idRef(\\"label.account.id.name\\", \\"displayForm\\"), {
    uris: [
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1426\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1427\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2872\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2873\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1428\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2874\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2871\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2875\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1429\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2876\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1430\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1432\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1431\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1433\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1434\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1435\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2877\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2878\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1436\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1437\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2879\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2880\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1438\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2881\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1439\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1440\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=9\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2882\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1441\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=10\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4513\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4514\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2888\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=13\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4672\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=14\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2889\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=16\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1446\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=15\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1447\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4515\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1448\\"
    ]
})
];
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newPositiveAttributeFilter } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const stackBy = newAttribute(idRef(\\"label.account.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.account.id.name\\"));
const filters = [
    newPositiveAttributeFilter(idRef(\\"label.account.id.name\\", \\"displayForm\\"), {
    uris: [
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1426\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1427\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2872\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2873\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1428\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2874\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2871\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2875\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1429\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2876\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1430\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1432\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1431\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1433\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1434\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1435\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2877\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2878\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1436\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1437\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2879\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2880\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1438\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2881\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1439\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1440\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=9\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2882\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1441\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=10\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4513\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4514\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2888\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=13\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4672\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=14\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2889\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=16\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1446\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=15\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1447\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4515\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1448\\"
    ]
})
];
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newPositiveAttributeFilter } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const stackBy = newAttribute(idRef(\\"label.account.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.account.id.name\\"));
const filters = [
    newPositiveAttributeFilter(idRef(\\"label.account.id.name\\", \\"displayForm\\"), {
    uris: [
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1426\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1427\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2872\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2873\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1428\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2874\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2871\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2875\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1429\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2876\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1430\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1432\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1431\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1433\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1434\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1435\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2877\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2878\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1436\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1437\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2879\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2880\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1438\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2881\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1439\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1440\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=9\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2882\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1441\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=10\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4513\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4514\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2888\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=13\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4672\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=14\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2889\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=16\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1446\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=15\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1447\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4515\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1448\\"
    ]
})
];
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newPositiveAttributeFilter } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const stackBy = newAttribute(idRef(\\"label.account.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.account.id.name\\"));
const filters = [
    newPositiveAttributeFilter(idRef(\\"label.account.id.name\\", \\"displayForm\\"), {
    uris: [
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1426\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1427\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2872\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2873\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1428\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2874\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2871\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2875\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1429\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2876\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1430\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1432\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1431\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1433\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1434\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1435\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2877\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2878\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1436\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1437\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2879\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2880\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1438\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2881\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1439\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1440\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=9\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2882\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1441\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=10\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4513\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4514\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2888\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=13\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4672\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=14\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2889\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=16\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1446\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=15\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1447\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4515\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1448\\"
    ]
})
];
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newPositiveAttributeFilter } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const stackBy = newAttribute(idRef(\\"label.account.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.account.id.name\\"));
const filters = [
    newPositiveAttributeFilter(idRef(\\"label.account.id.name\\", \\"displayForm\\"), {
    uris: [
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1426\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1427\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2872\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2873\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1428\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2874\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2871\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2875\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1429\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2876\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1430\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1432\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1431\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1433\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1434\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1435\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2877\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2878\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1436\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1437\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2879\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2880\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1438\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2881\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1439\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1440\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=9\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2882\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1441\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=10\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4513\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4514\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2888\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=13\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4672\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=14\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2889\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=16\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1446\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=15\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1447\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4515\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1448\\"
    ]
})
];
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newPositiveAttributeFilter } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const stackBy = newAttribute(idRef(\\"label.account.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.account.id.name\\"));
const filters = [
    newPositiveAttributeFilter(idRef(\\"label.account.id.name\\", \\"displayForm\\"), {
    uris: [
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1426\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1427\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2872\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2873\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1428\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2874\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2871\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2875\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1429\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2876\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1430\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1432\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1431\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1433\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1434\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1435\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2877\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2878\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1436\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1437\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2879\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2880\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1438\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2881\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1439\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1440\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=9\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2882\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1441\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=10\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4513\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4514\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2888\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=13\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4672\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=14\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2889\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=16\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1446\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=15\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1447\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4515\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1448\\"
    ]
})
];
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newPositiveAttributeFilter } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const stackBy = newAttribute(idRef(\\"label.account.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.account.id.name\\"));
const filters = [
    newPositiveAttributeFilter(idRef(\\"label.account.id.name\\", \\"displayForm\\"), {
    uris: [
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1426\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1427\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2872\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2873\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1428\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2874\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2871\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2875\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1429\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2876\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1430\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1432\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1431\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1433\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1434\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1435\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2877\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2878\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1436\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1437\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2879\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2880\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1438\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2881\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1439\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1440\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=9\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2882\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1441\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=10\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4513\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4514\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2888\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=13\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4672\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=14\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2889\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=16\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1446\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=15\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1447\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4515\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1448\\"
    ]
})
];
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - 610x154 - Force position RIGHT - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newPositiveAttributeFilter } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const stackBy = newAttribute(idRef(\\"label.account.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.account.id.name\\"));
const filters = [
    newPositiveAttributeFilter(idRef(\\"label.account.id.name\\", \\"displayForm\\"), {
    uris: [
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1426\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1427\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2872\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2873\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1428\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2874\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2871\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2875\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1429\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2876\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1430\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1432\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1431\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1433\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1434\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1435\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2877\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2878\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1436\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1437\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2879\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2880\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1438\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2881\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1439\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1440\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=9\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2882\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1441\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=10\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4513\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4514\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2888\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=13\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4672\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=14\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2889\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=16\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1446\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=15\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1447\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4515\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1448\\"
    ]
})
];
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - 610x154 - Force position RIGHT - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newPositiveAttributeFilter } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const stackBy = newAttribute(idRef(\\"label.account.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.account.id.name\\"));
const filters = [
    newPositiveAttributeFilter(idRef(\\"label.account.id.name\\", \\"displayForm\\"), {
    uris: [
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1426\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1427\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2872\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2873\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1428\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2874\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2871\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2875\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1429\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2876\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1430\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1432\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1431\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1433\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1434\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1435\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2877\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2878\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1436\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1437\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2879\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2880\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1438\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2881\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1439\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1440\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=9\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2882\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1441\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=10\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4513\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4514\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2888\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=13\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4672\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=14\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2889\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=16\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1446\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=15\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1447\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4515\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1448\\"
    ]
})
];
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - 610x154 - Force position RIGHT - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newPositiveAttributeFilter } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const stackBy = newAttribute(idRef(\\"label.account.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.account.id.name\\"));
const filters = [
    newPositiveAttributeFilter(idRef(\\"label.account.id.name\\", \\"displayForm\\"), {
    uris: [
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1426\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1427\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2872\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2873\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1428\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2874\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2871\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2875\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1429\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2876\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1430\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1432\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1431\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1433\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1434\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1435\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2877\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2878\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1436\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1437\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2879\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2880\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1438\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2881\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1439\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1440\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=9\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2882\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1441\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=10\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4513\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4514\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2888\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=13\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4672\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=14\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2889\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=16\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1446\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=15\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1447\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4515\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1448\\"
    ]
})
];
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - 610x154 - Force position RIGHT - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newPositiveAttributeFilter } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const stackBy = newAttribute(idRef(\\"label.account.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.account.id.name\\"));
const filters = [
    newPositiveAttributeFilter(idRef(\\"label.account.id.name\\", \\"displayForm\\"), {
    uris: [
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1426\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1427\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2872\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2873\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1428\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2874\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2871\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2875\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1429\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2876\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1430\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1432\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1431\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1433\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1434\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1435\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2877\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2878\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1436\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1437\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2879\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2880\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1438\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2881\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1439\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1440\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=9\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2882\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1441\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=10\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4513\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4514\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2888\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=13\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4672\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=14\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2889\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=16\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1446\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=15\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1447\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4515\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1448\\"
    ]
})
];
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - 610x154 - Force position RIGHT - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newPositiveAttributeFilter } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const stackBy = newAttribute(idRef(\\"label.account.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.account.id.name\\"));
const filters = [
    newPositiveAttributeFilter(idRef(\\"label.account.id.name\\", \\"displayForm\\"), {
    uris: [
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1426\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1427\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2872\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2873\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1428\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2874\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2871\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2875\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1429\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2876\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1430\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1432\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1431\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1433\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1434\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1435\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2877\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2878\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1436\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1437\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2879\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2880\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1438\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2881\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1439\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1440\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=9\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2882\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1441\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=10\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4513\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4514\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2888\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=13\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4672\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=14\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2889\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=16\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1446\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=15\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1447\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4515\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1448\\"
    ]
})
];
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newPositiveAttributeFilter } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const stackBy = newAttribute(idRef(\\"label.account.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.account.id.name\\"));
const filters = [
    newPositiveAttributeFilter(idRef(\\"label.account.id.name\\", \\"displayForm\\"), {
    uris: [
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1426\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1427\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2872\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2873\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1428\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2874\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2871\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2875\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1429\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2876\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1430\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1432\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1431\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1433\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1434\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1435\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2877\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2878\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1436\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1437\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2879\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2880\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1438\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2881\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1439\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1440\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=9\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2882\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1441\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=10\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4513\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4514\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2888\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=13\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4672\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=14\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2889\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=16\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1446\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=15\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1447\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4515\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1448\\"
    ]
})
];
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newPositiveAttributeFilter } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const stackBy = newAttribute(idRef(\\"label.account.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.account.id.name\\"));
const filters = [
    newPositiveAttributeFilter(idRef(\\"label.account.id.name\\", \\"displayForm\\"), {
    uris: [
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1426\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1427\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2872\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2873\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1428\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2874\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2871\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2875\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1429\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2876\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1430\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1432\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1431\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1433\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1434\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1435\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2877\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2878\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1436\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1437\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2879\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2880\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1438\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2881\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1439\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1440\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=9\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2882\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1441\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=10\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4513\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4514\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2888\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=13\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4672\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=14\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2889\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=16\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1446\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=15\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1447\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4515\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1448\\"
    ]
})
];
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newPositiveAttributeFilter } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const stackBy = newAttribute(idRef(\\"label.account.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.account.id.name\\"));
const filters = [
    newPositiveAttributeFilter(idRef(\\"label.account.id.name\\", \\"displayForm\\"), {
    uris: [
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1426\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1427\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2872\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2873\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1428\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2874\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2871\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2875\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1429\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2876\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1430\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1432\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1431\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1433\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1434\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1435\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2877\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2878\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1436\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1437\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2879\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2880\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1438\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2881\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1439\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1440\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=9\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2882\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1441\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=10\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4513\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4514\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2888\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=13\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4672\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=14\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2889\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=16\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1446\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=15\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1447\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4515\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1448\\"
    ]
})
];
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newPositiveAttributeFilter } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const stackBy = newAttribute(idRef(\\"label.account.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.account.id.name\\"));
const filters = [
    newPositiveAttributeFilter(idRef(\\"label.account.id.name\\", \\"displayForm\\"), {
    uris: [
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1426\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1427\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2872\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2873\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1428\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2874\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2871\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2875\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1429\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2876\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1430\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1432\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1431\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1433\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1434\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1435\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2877\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2878\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1436\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1437\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2879\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2880\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1438\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2881\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1439\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1440\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=9\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2882\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1441\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=10\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4513\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4514\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2888\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=13\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4672\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=14\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2889\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=16\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1446\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=15\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1447\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4515\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1448\\"
    ]
})
];
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newPositiveAttributeFilter } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const stackBy = newAttribute(idRef(\\"label.account.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.account.id.name\\"));
const filters = [
    newPositiveAttributeFilter(idRef(\\"label.account.id.name\\", \\"displayForm\\"), {
    uris: [
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1426\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1427\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2872\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2873\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1428\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2874\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2871\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2875\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1429\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2876\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1430\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1432\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1431\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1433\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1434\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1435\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2877\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2878\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1436\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1437\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2879\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2880\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1438\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2881\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1439\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1440\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=9\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2882\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1441\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=10\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4513\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4514\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2888\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=13\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4672\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=14\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2889\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=16\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1446\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=15\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1447\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4515\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1448\\"
    ]
})
];
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newPositiveAttributeFilter } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const stackBy = newAttribute(idRef(\\"label.account.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.account.id.name\\"));
const filters = [
    newPositiveAttributeFilter(idRef(\\"label.account.id.name\\", \\"displayForm\\"), {
    uris: [
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1426\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1427\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2872\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2873\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1428\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2874\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2871\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2875\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1429\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2876\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1430\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1432\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1431\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1433\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1434\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1435\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2877\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2878\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1436\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1437\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2879\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2880\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1438\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2881\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1439\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1440\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=9\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2882\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1441\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=10\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4513\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4514\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2888\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=13\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4672\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=14\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2889\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=16\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1446\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=15\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1447\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4515\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1448\\"
    ]
})
];
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newPositiveAttributeFilter } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const stackBy = newAttribute(idRef(\\"label.account.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.account.id.name\\"));
const filters = [
    newPositiveAttributeFilter(idRef(\\"label.account.id.name\\", \\"displayForm\\"), {
    uris: [
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1426\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1427\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2872\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2873\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1428\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2874\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2871\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2875\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1429\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2876\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1430\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1432\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1431\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1433\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1434\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1435\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2877\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2878\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1436\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1437\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2879\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2880\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1438\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2881\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1439\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1440\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=9\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2882\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1441\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=10\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4513\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4514\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2888\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=13\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4672\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=14\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2889\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=16\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1446\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=15\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1447\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4515\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1448\\"
    ]
})
];
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newPositiveAttributeFilter } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const stackBy = newAttribute(idRef(\\"label.account.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.account.id.name\\"));
const filters = [
    newPositiveAttributeFilter(idRef(\\"label.account.id.name\\", \\"displayForm\\"), {
    uris: [
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1426\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1427\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2872\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2873\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1428\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2874\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2871\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2875\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1429\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2876\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1430\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1432\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1431\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1433\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1434\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1435\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2877\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2878\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1436\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1437\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2879\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2880\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1438\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2881\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1439\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1440\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=9\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2882\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1441\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=10\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4513\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4514\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2888\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=13\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4672\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=14\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2889\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=16\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1446\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=15\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1447\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4515\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1448\\"
    ]
})
];
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newPositiveAttributeFilter } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const stackBy = newAttribute(idRef(\\"label.account.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.account.id.name\\"));
const filters = [
    newPositiveAttributeFilter(idRef(\\"label.account.id.name\\", \\"displayForm\\"), {
    uris: [
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1426\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1427\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2872\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2873\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1428\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2874\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2871\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2875\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1429\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2876\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1430\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1432\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1431\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1433\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1434\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1435\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2877\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2878\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1436\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1437\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2879\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2880\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1438\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2881\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1439\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1440\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=9\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2882\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1441\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=10\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4513\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4514\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2888\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=13\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4672\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=14\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2889\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=16\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1446\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=15\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1447\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4515\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1448\\"
    ]
})
];
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newPositiveAttributeFilter } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const stackBy = newAttribute(idRef(\\"label.account.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.account.id.name\\"));
const filters = [
    newPositiveAttributeFilter(idRef(\\"label.account.id.name\\", \\"displayForm\\"), {
    uris: [
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1426\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1427\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2872\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2873\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1428\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2874\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2871\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2875\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1429\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2876\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1430\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1432\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1431\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1433\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1434\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1435\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2877\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2878\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1436\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1437\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2879\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2880\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1438\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2881\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1439\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1440\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=9\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2882\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1441\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=10\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4513\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4514\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2888\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=13\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4672\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=14\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2889\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=16\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1446\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=15\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1447\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4515\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1448\\"
    ]
})
];
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - 650x90 - without x axis labels 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const stackBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const config = {legend: {enabled: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - 650x120 - without x axis title 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const stackBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const config = {legend: {enabled: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newPositiveAttributeFilter } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const stackBy = newAttribute(idRef(\\"label.account.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.account.id.name\\"));
const filters = [
    newPositiveAttributeFilter(idRef(\\"label.account.id.name\\", \\"displayForm\\"), {
    uris: [
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1426\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1427\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2872\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2873\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1428\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2874\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2871\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2875\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1429\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2876\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1430\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1432\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1431\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1433\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1434\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1435\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2877\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2878\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1436\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1437\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2879\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2880\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1438\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2881\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1439\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1440\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=9\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2882\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1441\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=10\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4513\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4514\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2888\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=13\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4672\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=14\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2889\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=16\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1446\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=15\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1447\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4515\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1448\\"
    ]
})
];
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newPositiveAttributeFilter } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const stackBy = newAttribute(idRef(\\"label.account.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.account.id.name\\"));
const filters = [
    newPositiveAttributeFilter(idRef(\\"label.account.id.name\\", \\"displayForm\\"), {
    uris: [
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1426\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1427\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2872\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2873\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1428\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2874\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2871\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2875\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1429\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2876\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1430\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1432\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1431\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1433\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1434\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1435\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2877\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2878\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1436\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1437\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2879\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2880\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1438\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2881\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1439\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1440\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=9\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2882\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1441\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=10\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4513\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4514\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2888\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=13\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4672\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=14\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2889\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=16\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1446\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=15\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1447\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4515\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1448\\"
    ]
})
];
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newPositiveAttributeFilter } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const stackBy = newAttribute(idRef(\\"label.account.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.account.id.name\\"));
const filters = [
    newPositiveAttributeFilter(idRef(\\"label.account.id.name\\", \\"displayForm\\"), {
    uris: [
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1426\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1427\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2872\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2873\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1428\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2874\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2871\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2875\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1429\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2876\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1430\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1432\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1431\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1433\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1434\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1435\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2877\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2878\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1436\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1437\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2879\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2880\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1438\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2881\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1439\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1440\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=9\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2882\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1441\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=10\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4513\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4514\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2888\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=13\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4672\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=14\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2889\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=16\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1446\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=15\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1447\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4515\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1448\\"
    ]
})
];
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newPositiveAttributeFilter } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const stackBy = newAttribute(idRef(\\"label.account.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.account.id.name\\"));
const filters = [
    newPositiveAttributeFilter(idRef(\\"label.account.id.name\\", \\"displayForm\\"), {
    uris: [
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1426\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1427\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2872\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2873\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1428\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2874\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2871\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2875\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1429\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2876\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1430\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1432\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1431\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1433\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1434\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1435\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2877\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2878\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1436\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1437\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2879\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2880\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1438\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2881\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1439\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1440\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=9\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2882\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1441\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=10\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4513\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4514\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2888\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=13\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4672\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=14\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2889\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=16\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1446\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=15\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1447\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4515\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1448\\"
    ]
})
];
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newPositiveAttributeFilter } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const stackBy = newAttribute(idRef(\\"label.account.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.account.id.name\\"));
const filters = [
    newPositiveAttributeFilter(idRef(\\"label.account.id.name\\", \\"displayForm\\"), {
    uris: [
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1426\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1427\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2872\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2873\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1428\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2874\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2871\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2875\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1429\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2876\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1430\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1432\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1431\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1433\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1434\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1435\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2877\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2878\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1436\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1437\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2879\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2880\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1438\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2881\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1439\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1440\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=9\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2882\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1441\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=10\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4513\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4514\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2888\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=13\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4672\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=14\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=2889\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=16\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1446\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=15\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1447\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=4515\\",
        \\"/gdc/md/l32xdyl4bjuzgf9kkqr2avl55gtuyjwf/obj/1057/elements?id=1448\\"
    ]
})
];
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - X axis min/max configuration 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {xaxis: {max: \\"25000000\\", min: \\"5000000\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - X axis on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    secondary_xaxis: {measures: [\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"]}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - X axis on top with two viewBy attributes 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const config = {
    secondary_xaxis: {measures: [\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"]}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - Y axis invisible 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const config = {yaxis: {visible: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - Y axis rotation 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const config = {yaxis: {rotation: \\"45\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - arithmetic measures 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - assign color to attribute element stack 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const stackBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - assign color to master measure impacts derived PoP 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newPopMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newPopMeasure(\\"m_acugFHNJgsBy\\", idRef(\\"closed.year\\", \\"attribute\\"), m => m.alias(\\"Won Last Year\\").localId(\\"m_m_acugFHNJgsBy_closed.year\\"))
];
const viewBy = [
    newAttribute(idRef(\\"closed.aag81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_closed.aag81lMifn6q\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - assign color to measures 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - coloring - custom palette 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - data labels - auto visibility 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {dataLabels: {visible: \\"auto\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - data labels - default 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - data labels - forced hidden 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {dataLabels: {visible: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - data labels - forced visible 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {dataLabels: {visible: true}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - data labels - forced visible and german separators 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {dataLabels: {visible: true}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - dual axis label rotation - 60 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    secondary_xaxis: {
        measures: [\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"],
        rotation: \\"60\\"
    },
    xaxis: {rotation: \\"60\\"}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - dual axis label rotation - 90 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    secondary_xaxis: {
        measures: [\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"],
        rotation: \\"90\\"
    },
    xaxis: {rotation: \\"90\\"}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - dual axis label rotation - minus60 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    secondary_xaxis: {
        measures: [\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"],
        rotation: \\"-60\\"
    },
    xaxis: {rotation: \\"-60\\"}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - dual axis label rotation - minus90 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    secondary_xaxis: {
        measures: [\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"],
        rotation: \\"-90\\"
    },
    xaxis: {rotation: \\"-90\\"}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - dual axis name customization - high 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const config = {
    secondary_xaxis: {
        measures: [\\"m_acugFHNJgsBy\\"],
        name: {position: \\"right\\"}
    },
    secondary_yaxis: {name: {position: \\"top\\"}},
    xaxis: {name: {position: \\"right\\"}},
    yaxis: {name: {position: \\"top\\"}}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - dual axis name customization - invisible 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const config = {
    secondary_xaxis: {
        measures: [\\"m_acugFHNJgsBy\\"],
        name: {position: \\"center\\"}
    },
    secondary_yaxis: {name: {position: \\"center\\"}},
    xaxis: {name: {position: \\"center\\"}},
    yaxis: {name: {position: \\"center\\"}}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - dual axis name customization - low 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const config = {
    secondary_xaxis: {
        measures: [\\"m_acugFHNJgsBy\\"],
        name: {position: \\"left\\"}
    },
    secondary_yaxis: {name: {position: \\"bottom\\"}},
    xaxis: {name: {position: \\"left\\"}},
    yaxis: {name: {position: \\"bottom\\"}}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - dual axis name customization - middle 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const config = {
    secondary_xaxis: {
        measures: [\\"m_acugFHNJgsBy\\"],
        name: {position: \\"center\\"}
    },
    secondary_yaxis: {name: {position: \\"center\\"}},
    xaxis: {name: {position: \\"center\\"}},
    yaxis: {name: {position: \\"center\\"}}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - dual axis when two viewBy attributes 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const config = {secondary_xaxis: {measures: [\\"m_acugFHNJgsBy\\"]}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - dual axis with one top measure and three bottom 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    secondary_xaxis: {measures: [\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"]}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - font 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const stackBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - four measures and PoP 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure, newPopMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newPopMeasure(\\"m_acugFHNJgsBy\\", idRef(\\"closed.year\\", \\"attribute\\"), m => m.alias(\\"Won Last Year\\").localId(\\"m_m_acugFHNJgsBy_closed.year\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"closed.aag81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_closed.aag81lMifn6q\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - legend position - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {legend: {position: \\"auto\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - legend position - disabled 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {legend: {enabled: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - legend position - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {legend: {position: \\"bottom\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - legend position - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {legend: {position: \\"left\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - legend position - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {legend: {position: \\"right\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - legend position - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {legend: {position: \\"top\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - single axis name customization - high 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    secondary_xaxis: {name: {position: \\"right\\"}},
    secondary_yaxis: {name: {position: \\"top\\"}},
    xaxis: {name: {position: \\"right\\"}},
    yaxis: {name: {position: \\"top\\"}}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - single axis name customization - invisible 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    secondary_xaxis: {name: {position: \\"center\\"}},
    secondary_yaxis: {name: {position: \\"center\\"}},
    xaxis: {name: {position: \\"center\\"}},
    yaxis: {name: {position: \\"center\\"}}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - single axis name customization - low 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    secondary_xaxis: {name: {position: \\"left\\"}},
    secondary_yaxis: {name: {position: \\"bottom\\"}},
    xaxis: {name: {position: \\"left\\"}},
    yaxis: {name: {position: \\"bottom\\"}}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - single axis name customization - middle 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    secondary_xaxis: {name: {position: \\"center\\"}},
    secondary_yaxis: {name: {position: \\"center\\"}},
    xaxis: {name: {position: \\"center\\"}},
    yaxis: {name: {position: \\"center\\"}}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - single measure 1`] = `
"import React from \\"react\\";
import { idRef, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - single measure ignores stack measures 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {stackMeasures: true};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - single measure with stack to 100% 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {stackMeasuresToPercent: true};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - single measure with two viewBy and stack 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const stackBy = newAttribute(idRef(\\"label.owner.department\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.department\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - single measure with viewBy 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - single measure with viewBy and stackBy 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const stackBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - stack measures and dual axis 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    secondary_xaxis: {measures: [\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"]},
    stackMeasures: true
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - stack measures to 100% and dual axis 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    secondary_xaxis: {measures: [\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"]},
    stackMeasuresToPercent: true
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - stack measures to 100% with dual axis and axis min/max 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    secondary_xaxis: {
        max: \\"2\\",
        measures: [\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"],
        min: \\"1\\"
    },
    stackMeasuresToPercent: true,
    xaxis: {max: \\"0.9\\", min: \\"0.1\\"}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - stackBy with one date 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newPopMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newPopMeasure(\\"m_acugFHNJgsBy\\", idRef(\\"closed.year\\", \\"attribute\\"), m => m.alias(\\"Won Last Year\\").localId(\\"m_m_acugFHNJgsBy_closed.year\\"))
];
const stackBy = newAttribute(idRef(\\"closed.aag81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_closed.aag81lMifn6q\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                stackBy={stackBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - themed 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const stackBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - two measures and two viewBy with stackMeasures 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const config = {stackMeasures: true};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - two measures and two viewBy with stackMeasuresToPercent 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const config = {stackMeasuresToPercent: true};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - two measures and two viewBy with top axis and stackMeasuresToPercent 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const config = {
    secondary_xaxis: {measures: [\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"]},
    stackMeasuresToPercent: true
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - two measures with dual axis and stack measures to 100% 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const config = {
    secondary_xaxis: {measures: [\\"m_aangOxLSeztu\\"]},
    stackMeasuresToPercent: true
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - two measures with dual axis ignores stack measures 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const config = {
    secondary_xaxis: {measures: [\\"m_aangOxLSeztu\\"]},
    stackMeasures: true
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - two measures with two viewBy 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - two measures with two viewBy, filtered to single value 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newPositiveAttributeFilter } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const filters = [
    newPositiveAttributeFilter(idRef(\\"label.product.id.name\\", \\"displayForm\\"), {values: [\\"WonderKid\\"]}),
    newPositiveAttributeFilter(idRef(\\"label.owner.region\\", \\"displayForm\\"), {values: [\\"East Coast\\"]})
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                filters={filters}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - two measures with viewBy 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - two measures with viewBy sorted by attribute 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newAttributeSort, newMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const sortBy = [
    newAttributeSort(\\"a_label.product.id.name\\", \\"desc\\")
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - two measures with viewBy sorted by measure 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newMeasureSort } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const sortBy = [newMeasureSort(\\"m_acugFHNJgsBy\\", \\"asc\\", [])];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - viewBy date and PoP measure 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newPopMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newPopMeasure(\\"m_acugFHNJgsBy\\", idRef(\\"closed.year\\", \\"attribute\\"), m => m.alias(\\"Won Last Year\\").localId(\\"m_m_acugFHNJgsBy_closed.year\\"))
];
const viewBy = [
    newAttribute(idRef(\\"closed.aag81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_closed.aag81lMifn6q\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BarChart - viewBy with two dates 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newPopMeasure } from \\"@gooddata/sdk-model\\";
import { BarChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newPopMeasure(\\"m_acugFHNJgsBy\\", idRef(\\"closed.year\\", \\"attribute\\"), m => m.alias(\\"Won Last Year\\").localId(\\"m_m_acugFHNJgsBy_closed.year\\"))
];
const viewBy = [
    newAttribute(idRef(\\"closed.aag81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_closed.aag81lMifn6q\\")),
    newAttribute(idRef(\\"closed.aag81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_closed.aag81lMifn6q_1\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BarChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - 610x154 - Force position RIGHT - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - 610x154 - Force position RIGHT - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - 610x154 - Force position RIGHT - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - 610x154 - Force position RIGHT - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - 610x154 - Force position RIGHT - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - X and Y axis min/max configuration 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    xaxis: {max: \\"25000000\\", min: \\"5000000\\"},
    yaxis: {max: \\".70\\", min: \\".54\\"}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - X axis max only configuration 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {xaxis: {max: \\"15000000\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - X axis min/max configuration 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {xaxis: {max: \\"25000000\\", min: \\"5000000\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - Y axis max only configuration 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {yaxis: {max: \\".53\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - Y axis min/max configuration 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {yaxis: {max: \\".70\\", min: \\".54\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - arithmetic measure 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const size = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - assign color to attribute bubbles 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - axis name customization - high 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    secondary_xaxis: {name: {position: \\"right\\"}},
    secondary_yaxis: {name: {position: \\"top\\"}},
    xaxis: {name: {position: \\"right\\"}},
    yaxis: {name: {position: \\"top\\"}}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - axis name customization - invisible 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    secondary_xaxis: {name: {position: \\"center\\"}},
    secondary_yaxis: {name: {position: \\"center\\"}},
    xaxis: {name: {position: \\"center\\"}},
    yaxis: {name: {position: \\"center\\"}}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - axis name customization - low 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    secondary_xaxis: {name: {position: \\"left\\"}},
    secondary_yaxis: {name: {position: \\"bottom\\"}},
    xaxis: {name: {position: \\"left\\"}},
    yaxis: {name: {position: \\"bottom\\"}}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - axis name customization - middle 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    secondary_xaxis: {name: {position: \\"center\\"}},
    secondary_yaxis: {name: {position: \\"center\\"}},
    xaxis: {name: {position: \\"center\\"}},
    yaxis: {name: {position: \\"center\\"}}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - coloring - custom palette 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - data labels - auto visibility 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {dataLabels: {visible: \\"auto\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - data labels - default 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - data labels - forced hidden 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {dataLabels: {visible: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - data labels - forced visible 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {dataLabels: {visible: true}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - data labels - forced visible and german separators 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {dataLabels: {visible: true}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - font 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - legend position - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {legend: {position: \\"auto\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - legend position - disabled 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {legend: {enabled: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - legend position - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {legend: {position: \\"bottom\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - legend position - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {legend: {position: \\"left\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - legend position - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {legend: {position: \\"right\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - legend position - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {legend: {position: \\"top\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - themed 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - x and y axis and size measures with viewBy 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - x and y axis and size measures with viewBy and sorted by attr 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newAttributeSort, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const sortBy = [
    newAttributeSort(\\"a_label.product.id.name\\", \\"desc\\")
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
                sortBy={sortBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - x and y axis and size measures with viewBy with nulls in data 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"closed.aag81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_closed.aag81lMifn6q\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - x and y axis measures with viewBy 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - x axis and size measures with viewBy 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                size={size}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - x axis measure 1`] = `
"import React from \\"react\\";
import { idRef, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - x axis measure with viewBy 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                xAxisMeasure={xAxisMeasure}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BubbleChart - y axis and size measures with viewBy 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BubbleChart } from \\"@gooddata/sdk-ui-charts\\";

const yAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const size = newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\"));
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BubbleChart
                yAxisMeasure={yAxisMeasure}
                size={size}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - 80x50 - without x axis, without y axis (very small container) 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {legend: {enabled: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - 140x354 - without y axis labels 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {legend: {enabled: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - 165x354 - without y axis title 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {legend: {enabled: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - 610x154 - Force position RIGHT - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - 610x154 - Force position RIGHT - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - 610x154 - Force position RIGHT - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - 610x154 - Force position RIGHT - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - 610x154 - Force position RIGHT - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - 650x50 - without x axis labels 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {legend: {enabled: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - 650x80 - without x axis labels, with x axis title 1`] = `
"import React from \\"react\\";
import { idRef, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const config = {legend: {enabled: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - 650x120 - without x axis title 1`] = `
"import React from \\"react\\";
import { idRef, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const config = {legend: {enabled: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - X axis hidden 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {xaxis: {visible: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - X axis max only configuration 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {xaxis: {max: \\"15000000\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - X axis min/max configuration 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {xaxis: {max: \\"25000000\\", min: \\"5000000\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - X axis rotation 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {xaxis: {rotation: \\"60\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - Y axis hidden 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {yaxis: {visible: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - Y axis rotation 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {yaxis: {rotation: \\"60\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - assign color to attribute bubbles 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - axis name customization - high 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    secondary_xaxis: {name: {position: \\"right\\"}},
    secondary_yaxis: {name: {position: \\"top\\"}},
    xaxis: {name: {position: \\"right\\"}},
    yaxis: {name: {position: \\"top\\"}}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - axis name customization - invisible 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    secondary_xaxis: {name: {position: \\"center\\"}},
    secondary_yaxis: {name: {position: \\"center\\"}},
    xaxis: {name: {position: \\"center\\"}},
    yaxis: {name: {position: \\"center\\"}}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - axis name customization - low 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    secondary_xaxis: {name: {position: \\"left\\"}},
    secondary_yaxis: {name: {position: \\"bottom\\"}},
    xaxis: {name: {position: \\"left\\"}},
    yaxis: {name: {position: \\"bottom\\"}}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - axis name customization - middle 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    secondary_xaxis: {name: {position: \\"center\\"}},
    secondary_yaxis: {name: {position: \\"center\\"}},
    xaxis: {name: {position: \\"center\\"}},
    yaxis: {name: {position: \\"center\\"}}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - coloring - custom palette 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - data labels - auto visibility 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {dataLabels: {visible: \\"auto\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - data labels - default 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - data labels - forced hidden 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {dataLabels: {visible: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - data labels - forced visible 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {dataLabels: {visible: true}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - data labels - forced visible and german separators 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {dataLabels: {visible: true}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - font 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - legend position - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {legend: {position: \\"auto\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - legend position - disabled 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {legend: {enabled: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - legend position - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {legend: {position: \\"bottom\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - legend position - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {legend: {position: \\"left\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - legend position - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {legend: {position: \\"right\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - legend position - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {legend: {position: \\"top\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - primary and comparative measures 1`] = `
"import React from \\"react\\";
import { idRef, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const comparativeMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                comparativeMeasure={comparativeMeasure}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - primary and target measures 1`] = `
"import React from \\"react\\";
import { idRef, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - primary and target measures with viewBy 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - primary measure 1`] = `
"import React from \\"react\\";
import { idRef, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - primary with two viewBy dates 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const viewBy = [
    newAttribute(idRef(\\"closed.aag81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_closed.aag81lMifn6q\\")),
    newAttribute(idRef(\\"closed.aag81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_closed.aag81lMifn6q_1\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - primary, target and comparative measures 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - primary, target and comparative measures with two viewBy 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - primary, target and comparative measures with two viewBy dates 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"closed.aag81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_closed.aag81lMifn6q\\")),
    newAttribute(idRef(\\"closed.aag81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_closed.aag81lMifn6q_1\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - primary, target and comparative measures with viewBy 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - primary, target and comparative measures with viewBy and sort 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newAttributeSort, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const sortBy = [
    newAttributeSort(\\"a_label.product.id.name\\", \\"asc\\")
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
                sortBy={sortBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for BulletChart - themed 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { BulletChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const targetMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const comparativeMeasure = newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"));
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <BulletChart
                primaryMeasure={primaryMeasure}
                targetMeasure={targetMeasure}
                comparativeMeasure={comparativeMeasure}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - 40x60 - without x axis, without y axis (very small container) 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {legend: {enabled: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - 60x354 - without y axis labels 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {legend: {enabled: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - 60x354 - without y axis labels, with y axis title 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {legend: {enabled: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - 120x354 - without y axis title 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {legend: {enabled: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const stackBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const stackBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const stackBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const stackBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const stackBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const stackBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const stackBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const stackBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const stackBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const stackBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const stackBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const stackBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const stackBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const stackBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const stackBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const stackBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const stackBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const stackBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const stackBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const stackBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - 610x154 - Force position RIGHT - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const stackBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - 610x154 - Force position RIGHT - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const stackBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - 610x154 - Force position RIGHT - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const stackBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - 610x154 - Force position RIGHT - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const stackBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - 610x154 - Force position RIGHT - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const stackBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const stackBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const stackBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const stackBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const stackBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const stackBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const stackBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const stackBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const stackBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const stackBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const stackBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - 650x90 - without x axis labels 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {legend: {enabled: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - 650x120 - without x axis title 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {legend: {enabled: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const stackBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const stackBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const stackBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const stackBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const stackBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - Stack measures to 100% with and axis min/max 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const config = {
    dataLabels: {visible: true},
    stackMeasuresToPercent: true,
    yaxis: {max: \\"0.9\\", min: \\"0.1\\"}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - X and Y axis invisible 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const config = {xaxis: {visible: false}, yaxis: {visible: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - X axis invisible 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const config = {xaxis: {visible: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - X axis rotation 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const config = {xaxis: {rotation: \\"45\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - Y axis min/max configuration 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {yaxis: {max: \\"25000000\\", min: \\"5000000\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - Y axis on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    secondary_yaxis: {measures: [\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"]}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - Y axis on right with two viewBy attributes 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const config = {
    secondary_yaxis: {measures: [\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"]}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - assign color to attribute element stack 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const stackBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - assign color to master measure impacts derived PoP 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newPopMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newPopMeasure(\\"m_acugFHNJgsBy\\", idRef(\\"closed.year\\", \\"attribute\\"), m => m.alias(\\"Won Last Year\\").localId(\\"m_m_acugFHNJgsBy_closed.year\\"))
];
const viewBy = [
    newAttribute(idRef(\\"closed.aag81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_closed.aag81lMifn6q\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - assign color to measures 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - coloring - custom palette 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - data labels - auto visibility 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {dataLabels: {visible: \\"auto\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - data labels - default 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - data labels - forced hidden 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {dataLabels: {visible: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - data labels - forced visible 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {dataLabels: {visible: true}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - data labels - forced visible and german separators 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {dataLabels: {visible: true}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - dense chart with two view by 1`] = `
"import React from \\"react\\";
import { idRef, localIdRef, newAttribute, newMeasure, newMeasureValueFilter } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.localId(\\"m_fact.opportunitysnapshot.amount_sum\\").aggregation(\\"sum\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.opportunity.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.opportunity.id.name\\"))
];
const filters = [
    newMeasureValueFilter(localIdRef(\\"m_fact.opportunitysnapshot.amount_sum\\"), \\"GREATER_THAN\\", 5000000)
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                filters={filters}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - dual axis name customization - high 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    secondary_xaxis: {name: {position: \\"right\\"}},
    secondary_yaxis: {
        measures: [\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"],
        name: {position: \\"top\\"}
    },
    xaxis: {name: {position: \\"right\\"}},
    yaxis: {name: {position: \\"top\\"}}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - dual axis name customization - invisible 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    secondary_xaxis: {name: {position: \\"center\\"}},
    secondary_yaxis: {
        measures: [\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"],
        name: {position: \\"center\\"}
    },
    xaxis: {name: {position: \\"center\\"}},
    yaxis: {name: {position: \\"center\\"}}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - dual axis name customization - low 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    secondary_xaxis: {name: {position: \\"left\\"}},
    secondary_yaxis: {
        measures: [\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"],
        name: {position: \\"bottom\\"}
    },
    xaxis: {name: {position: \\"left\\"}},
    yaxis: {name: {position: \\"bottom\\"}}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - dual axis name customization - middle 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    secondary_xaxis: {name: {position: \\"center\\"}},
    secondary_yaxis: {
        measures: [\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"],
        name: {position: \\"center\\"}
    },
    xaxis: {name: {position: \\"center\\"}},
    yaxis: {name: {position: \\"center\\"}}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - dual axis when two viewBy attributes 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const config = {secondary_yaxis: {measures: [\\"m_acugFHNJgsBy\\"]}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - dual axis with hidden right Y axis 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    secondary_yaxis: {
        measures: [\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"],
        visible: false
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - dual axis with no labels on right Y axis 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    secondary_yaxis: {
        labelsEnabled: false,
        measures: [\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"]
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - dual axis with one right measure and three left 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    secondary_yaxis: {measures: [\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"]}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - dual axis with right axis labels rotated 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    secondary_yaxis: {
        measures: [\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"],
        rotation: \\"45\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - font 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - legend position - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {legend: {position: \\"auto\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - legend position - disabled 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {legend: {enabled: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - legend position - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {legend: {position: \\"bottom\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - legend position - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {legend: {position: \\"left\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - legend position - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {legend: {position: \\"right\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - legend position - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {legend: {position: \\"top\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - no gridline 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {grid: {enabled: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - single axis name customization - high 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    secondary_xaxis: {name: {position: \\"right\\"}},
    secondary_yaxis: {name: {position: \\"top\\"}},
    xaxis: {name: {position: \\"right\\"}},
    yaxis: {name: {position: \\"top\\"}}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - single axis name customization - invisible 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    secondary_xaxis: {name: {position: \\"center\\"}},
    secondary_yaxis: {name: {position: \\"center\\"}},
    xaxis: {name: {position: \\"center\\"}},
    yaxis: {name: {position: \\"center\\"}}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - single axis name customization - low 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    secondary_xaxis: {name: {position: \\"left\\"}},
    secondary_yaxis: {name: {position: \\"bottom\\"}},
    xaxis: {name: {position: \\"left\\"}},
    yaxis: {name: {position: \\"bottom\\"}}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - single axis name customization - middle 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    secondary_xaxis: {name: {position: \\"center\\"}},
    secondary_yaxis: {name: {position: \\"center\\"}},
    xaxis: {name: {position: \\"center\\"}},
    yaxis: {name: {position: \\"center\\"}}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - single measure 1`] = `
"import React from \\"react\\";
import { idRef, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - single measure ignores stack measures 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {stackMeasures: true};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - single measure with one viewBy and one stackBy with multiple items 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const stackBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - single measure with stack to 100% 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {stackMeasuresToPercent: true};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - single measure with two viewBy and stack 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const stackBy = newAttribute(idRef(\\"label.owner.department\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.department\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - single measure with viewBy 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - single measure with viewBy and stackBy 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const stackBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - single measure with viewBy and stackBy filtered to single stack 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newPositiveAttributeFilter } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const stackBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const filters = [
    newPositiveAttributeFilter(idRef(\\"label.owner.region\\", \\"displayForm\\"), {values: [\\"East Coast\\"]})
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                stackBy={stackBy}
                filters={filters}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - single ratio measure with viewBy 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.alias(\\"Amount with Ratio\\").localId(\\"m_aangOxLSeztu_ratio\\").ratio())
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - stack measures and dual axis 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    secondary_yaxis: {measures: [\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"]},
    stackMeasures: true
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - stack measures to 100% and dual axis 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    secondary_yaxis: {measures: [\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"]},
    stackMeasuresToPercent: true
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - stack measures to 100% with dual axis and axis min/max 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    secondary_yaxis: {
        max: \\"2\\",
        measures: [\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"],
        min: \\"1\\"
    },
    stackMeasuresToPercent: true,
    yaxis: {max: \\"0.9\\", min: \\"0.1\\"}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - stackBy with one date 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newPopMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newPopMeasure(\\"m_acugFHNJgsBy\\", idRef(\\"closed.year\\", \\"attribute\\"), m => m.alias(\\"Won Last Year\\").localId(\\"m_m_acugFHNJgsBy_closed.year\\"))
];
const stackBy = newAttribute(idRef(\\"closed.aag81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_closed.aag81lMifn6q\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                stackBy={stackBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - themed 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - two measures 1`] = `
"import React from \\"react\\";
import { idRef, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - two measures and two viewBy with right axis and stackMeasuresToPercent 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const config = {
    secondary_yaxis: {measures: [\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"]},
    stackMeasuresToPercent: true
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - two measures and two viewBy with stackMeasures 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const config = {stackMeasures: true};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - two measures and two viewBy with stackMeasuresToPercent 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const config = {stackMeasuresToPercent: true};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - two measures with dual axis and stack measures to 100% 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const config = {
    secondary_yaxis: {measures: [\\"m_aangOxLSeztu\\"]},
    stackMeasuresToPercent: true
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - two measures with dual axis ignores stack measures 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const config = {
    secondary_yaxis: {measures: [\\"m_aangOxLSeztu\\"]},
    stackMeasures: true
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - two measures with two viewBy 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - two measures with viewBy 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - two measures with viewBy sorted by attribute 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newAttributeSort, newMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const sortBy = [
    newAttributeSort(\\"a_label.product.id.name\\", \\"desc\\")
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - two measures with viewBy sorted by measure 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newMeasureSort } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const sortBy = [newMeasureSort(\\"m_acugFHNJgsBy\\", \\"asc\\", [])];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
                sortBy={sortBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - viewBy date and PoP measure 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newPopMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newPopMeasure(\\"m_acugFHNJgsBy\\", idRef(\\"closed.year\\", \\"attribute\\"), m => m.alias(\\"Won Last Year\\").localId(\\"m_m_acugFHNJgsBy_closed.year\\"))
];
const viewBy = [
    newAttribute(idRef(\\"closed.aag81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_closed.aag81lMifn6q\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ColumnChart - viewBy with two dates 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newPopMeasure } from \\"@gooddata/sdk-model\\";
import { ColumnChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newPopMeasure(\\"m_acugFHNJgsBy\\", idRef(\\"closed.year\\", \\"attribute\\"), m => m.alias(\\"Won Last Year\\").localId(\\"m_m_acugFHNJgsBy_closed.year\\"))
];
const viewBy = [
    newAttribute(idRef(\\"closed.aag81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_closed.aag81lMifn6q\\")),
    newAttribute(idRef(\\"closed.aag81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_closed.aag81lMifn6q_1\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ColumnChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - 'Stack Measures' off and 'Stack to 100%' on 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const secondaryMeasures = [
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    dualAxis: false,
    stackMeasures: false,
    stackMeasuresToPercent: true
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - 'Stack Measures' on and 'Stack to 100%' on 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const secondaryMeasures = [
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    dualAxis: false,
    stackMeasures: true,
    stackMeasuresToPercent: true
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Min Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_min\\").aggregation(\\"min\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Median Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_median\\").aggregation(\\"median\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Max Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_max\\").aggregation(\\"max\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Min Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_min\\").aggregation(\\"min\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Median Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_median\\").aggregation(\\"median\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Max Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_max\\").aggregation(\\"max\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Min Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_min\\").aggregation(\\"min\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Median Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_median\\").aggregation(\\"median\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Max Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_max\\").aggregation(\\"max\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Min Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_min\\").aggregation(\\"min\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Median Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_median\\").aggregation(\\"median\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Max Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_max\\").aggregation(\\"max\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Min Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_min\\").aggregation(\\"min\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Median Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_median\\").aggregation(\\"median\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Max Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_max\\").aggregation(\\"max\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Min Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_min\\").aggregation(\\"min\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Median Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_median\\").aggregation(\\"median\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Max Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_max\\").aggregation(\\"max\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Min Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_min\\").aggregation(\\"min\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Median Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_median\\").aggregation(\\"median\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Max Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_max\\").aggregation(\\"max\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Min Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_min\\").aggregation(\\"min\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Median Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_median\\").aggregation(\\"median\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Max Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_max\\").aggregation(\\"max\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Min Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_min\\").aggregation(\\"min\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Median Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_median\\").aggregation(\\"median\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Max Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_max\\").aggregation(\\"max\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Min Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_min\\").aggregation(\\"min\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Median Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_median\\").aggregation(\\"median\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Max Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_max\\").aggregation(\\"max\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Min Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_min\\").aggregation(\\"min\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Median Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_median\\").aggregation(\\"median\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Max Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_max\\").aggregation(\\"max\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Min Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_min\\").aggregation(\\"min\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Median Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_median\\").aggregation(\\"median\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Max Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_max\\").aggregation(\\"max\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Min Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_min\\").aggregation(\\"min\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Median Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_median\\").aggregation(\\"median\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Max Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_max\\").aggregation(\\"max\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Min Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_min\\").aggregation(\\"min\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Median Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_median\\").aggregation(\\"median\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Max Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_max\\").aggregation(\\"max\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Min Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_min\\").aggregation(\\"min\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Median Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_median\\").aggregation(\\"median\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Max Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_max\\").aggregation(\\"max\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Min Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_min\\").aggregation(\\"min\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Median Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_median\\").aggregation(\\"median\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Max Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_max\\").aggregation(\\"max\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Min Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_min\\").aggregation(\\"min\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Median Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_median\\").aggregation(\\"median\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Max Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_max\\").aggregation(\\"max\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Min Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_min\\").aggregation(\\"min\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Median Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_median\\").aggregation(\\"median\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Max Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_max\\").aggregation(\\"max\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Min Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_min\\").aggregation(\\"min\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Median Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_median\\").aggregation(\\"median\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Max Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_max\\").aggregation(\\"max\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Min Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_min\\").aggregation(\\"min\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Median Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_median\\").aggregation(\\"median\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Max Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_max\\").aggregation(\\"max\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - 610x154 - Force position RIGHT - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Min Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_min\\").aggregation(\\"min\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Median Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_median\\").aggregation(\\"median\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Max Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_max\\").aggregation(\\"max\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - 610x154 - Force position RIGHT - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Min Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_min\\").aggregation(\\"min\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Median Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_median\\").aggregation(\\"median\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Max Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_max\\").aggregation(\\"max\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - 610x154 - Force position RIGHT - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Min Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_min\\").aggregation(\\"min\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Median Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_median\\").aggregation(\\"median\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Max Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_max\\").aggregation(\\"max\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - 610x154 - Force position RIGHT - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Min Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_min\\").aggregation(\\"min\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Median Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_median\\").aggregation(\\"median\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Max Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_max\\").aggregation(\\"max\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - 610x154 - Force position RIGHT - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Min Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_min\\").aggregation(\\"min\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Median Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_median\\").aggregation(\\"median\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Max Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_max\\").aggregation(\\"max\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Min Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_min\\").aggregation(\\"min\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Median Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_median\\").aggregation(\\"median\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Max Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_max\\").aggregation(\\"max\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Min Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_min\\").aggregation(\\"min\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Median Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_median\\").aggregation(\\"median\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Max Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_max\\").aggregation(\\"max\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Min Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_min\\").aggregation(\\"min\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Median Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_median\\").aggregation(\\"median\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Max Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_max\\").aggregation(\\"max\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Min Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_min\\").aggregation(\\"min\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Median Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_median\\").aggregation(\\"median\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Max Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_max\\").aggregation(\\"max\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Min Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_min\\").aggregation(\\"min\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Median Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_median\\").aggregation(\\"median\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Max Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_max\\").aggregation(\\"max\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Min Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_min\\").aggregation(\\"min\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Median Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_median\\").aggregation(\\"median\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Max Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_max\\").aggregation(\\"max\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Min Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_min\\").aggregation(\\"min\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Median Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_median\\").aggregation(\\"median\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Max Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_max\\").aggregation(\\"max\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Min Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_min\\").aggregation(\\"min\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Median Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_median\\").aggregation(\\"median\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Max Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_max\\").aggregation(\\"max\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Min Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_min\\").aggregation(\\"min\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Median Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_median\\").aggregation(\\"median\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Max Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_max\\").aggregation(\\"max\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Min Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_min\\").aggregation(\\"min\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Median Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_median\\").aggregation(\\"median\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Max Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_max\\").aggregation(\\"max\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Min Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_min\\").aggregation(\\"min\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Median Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_median\\").aggregation(\\"median\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Max Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_max\\").aggregation(\\"max\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Min Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_min\\").aggregation(\\"min\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Median Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_median\\").aggregation(\\"median\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Max Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_max\\").aggregation(\\"max\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Min Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_min\\").aggregation(\\"min\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Median Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_median\\").aggregation(\\"median\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Max Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_max\\").aggregation(\\"max\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Min Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_min\\").aggregation(\\"min\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Median Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_median\\").aggregation(\\"median\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Max Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_max\\").aggregation(\\"max\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Min Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_min\\").aggregation(\\"min\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Median Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_median\\").aggregation(\\"median\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Max Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_max\\").aggregation(\\"max\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - arithmetic measures 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const secondaryMeasures = [
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - assign color to measures 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const secondaryMeasures = [
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - axis name configuration - high 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    secondary_xaxis: {name: {position: \\"right\\"}},
    secondary_yaxis: {name: {position: \\"top\\"}},
    xaxis: {name: {position: \\"right\\"}},
    yaxis: {name: {position: \\"top\\"}}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - axis name configuration - invisible 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    secondary_xaxis: {name: {position: \\"center\\"}},
    secondary_yaxis: {name: {position: \\"center\\"}},
    xaxis: {name: {position: \\"center\\"}},
    yaxis: {name: {position: \\"center\\"}}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - axis name configuration - low 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    secondary_xaxis: {name: {position: \\"left\\"}},
    secondary_yaxis: {name: {position: \\"bottom\\"}},
    xaxis: {name: {position: \\"left\\"}},
    yaxis: {name: {position: \\"bottom\\"}}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - axis name configuration - middle 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    secondary_xaxis: {name: {position: \\"center\\"}},
    secondary_yaxis: {name: {position: \\"center\\"}},
    xaxis: {name: {position: \\"center\\"}},
    yaxis: {name: {position: \\"center\\"}}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - coloring - custom palette 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const secondaryMeasures = [
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - data labels - auto visibility 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {dataLabels: {visible: \\"auto\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - data labels - default 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - data labels - forced hidden 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {dataLabels: {visible: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - data labels - forced visible 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {dataLabels: {visible: true}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - data labels - forced visible and german separators 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {dataLabels: {visible: true}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - data points - dense chart - auto visibility 1`] = `
"import React from \\"react\\";
import { idRef, localIdRef, newAttribute, newMeasure, newMeasureValueFilter } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.opportunity.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.opportunity.id.name\\"))
];
const filters = [
    newMeasureValueFilter(localIdRef(\\"m_aangOxLSeztu\\"), \\"GREATER_THAN\\", 100000)
];
const config = {
    dataPoints: {visible: \\"auto\\"},
    primaryChartType: \\"line\\",
    secondaryChartType: \\"area\\"
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - data points - dense chart - default 1`] = `
"import React from \\"react\\";
import { idRef, localIdRef, newAttribute, newMeasure, newMeasureValueFilter } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.opportunity.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.opportunity.id.name\\"))
];
const filters = [
    newMeasureValueFilter(localIdRef(\\"m_aangOxLSeztu\\"), \\"GREATER_THAN\\", 100000)
];
const config = {
    primaryChartType: \\"line\\",
    secondaryChartType: \\"area\\"
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - data points - dense chart - forced hidden 1`] = `
"import React from \\"react\\";
import { idRef, localIdRef, newAttribute, newMeasure, newMeasureValueFilter } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.opportunity.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.opportunity.id.name\\"))
];
const filters = [
    newMeasureValueFilter(localIdRef(\\"m_aangOxLSeztu\\"), \\"GREATER_THAN\\", 100000)
];
const config = {
    dataPoints: {visible: false},
    primaryChartType: \\"line\\",
    secondaryChartType: \\"area\\"
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - data points - dense chart - forced visible 1`] = `
"import React from \\"react\\";
import { idRef, localIdRef, newAttribute, newMeasure, newMeasureValueFilter } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.opportunity.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.opportunity.id.name\\"))
];
const filters = [
    newMeasureValueFilter(localIdRef(\\"m_aangOxLSeztu\\"), \\"GREATER_THAN\\", 100000)
];
const config = {
    dataPoints: {visible: true},
    primaryChartType: \\"line\\",
    secondaryChartType: \\"area\\"
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - data points - sparse chart - auto visibility 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    dataPoints: {visible: \\"auto\\"},
    primaryChartType: \\"line\\",
    secondaryChartType: \\"area\\"
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - data points - sparse chart - default 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    primaryChartType: \\"line\\",
    secondaryChartType: \\"area\\"
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - data points - sparse chart - forced hidden 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    dataPoints: {visible: false},
    primaryChartType: \\"line\\",
    secondaryChartType: \\"area\\"
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - data points - sparse chart - forced visible 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    dataPoints: {visible: true},
    primaryChartType: \\"line\\",
    secondaryChartType: \\"area\\"
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - discard stacking when primary measures are not specified - secondary is area 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const secondaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    primaryChartType: \\"line\\",
    secondaryChartType: \\"area\\",
    stackMeasures: true
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - discard stacking when primary measures are not specified - secondary is column 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const secondaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    primaryChartType: \\"line\\",
    secondaryChartType: \\"column\\",
    stackMeasures: true
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - discard stacking when primary measures are on line chart - secondary is area 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Min Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_min\\").aggregation(\\"min\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Median Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_median\\").aggregation(\\"median\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Max Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_max\\").aggregation(\\"max\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    primaryChartType: \\"line\\",
    secondaryChartType: \\"area\\",
    stackMeasures: true
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - discard stacking when primary measures are on line chart - secondary is column 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Min Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_min\\").aggregation(\\"min\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Median Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_median\\").aggregation(\\"median\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Max Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_max\\").aggregation(\\"max\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    primaryChartType: \\"line\\",
    secondaryChartType: \\"column\\",
    stackMeasures: true
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - dual axis disabled 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {dualAxis: false};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - dual axis multiple measures with slicingarea-area 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const secondaryMeasures = [
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    primaryChartType: \\"area\\",
    secondaryChartType: \\"area\\"
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - dual axis multiple measures with slicingarea-column 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const secondaryMeasures = [
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    primaryChartType: \\"area\\",
    secondaryChartType: \\"column\\"
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - dual axis multiple measures with slicingarea-line 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const secondaryMeasures = [
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    primaryChartType: \\"area\\",
    secondaryChartType: \\"line\\"
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - dual axis multiple measures with slicingcolumn-area 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const secondaryMeasures = [
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    primaryChartType: \\"column\\",
    secondaryChartType: \\"area\\"
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - dual axis multiple measures with slicingcolumn-column 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const secondaryMeasures = [
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    primaryChartType: \\"column\\",
    secondaryChartType: \\"column\\"
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - dual axis multiple measures with slicingcolumn-line 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const secondaryMeasures = [
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    primaryChartType: \\"column\\",
    secondaryChartType: \\"line\\"
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - dual axis multiple measures with slicingline-area 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const secondaryMeasures = [
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    primaryChartType: \\"line\\",
    secondaryChartType: \\"area\\"
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - dual axis multiple measures with slicingline-column 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const secondaryMeasures = [
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    primaryChartType: \\"line\\",
    secondaryChartType: \\"column\\"
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - dual axis multiple measures with slicingline-line 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const secondaryMeasures = [
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    primaryChartType: \\"line\\",
    secondaryChartType: \\"line\\"
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - dual axis multiple measures without slicingarea-area 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const secondaryMeasures = [
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const config = {
    primaryChartType: \\"area\\",
    secondaryChartType: \\"area\\"
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - dual axis multiple measures without slicingarea-column 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const secondaryMeasures = [
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const config = {
    primaryChartType: \\"area\\",
    secondaryChartType: \\"column\\"
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - dual axis multiple measures without slicingarea-line 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const secondaryMeasures = [
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const config = {
    primaryChartType: \\"area\\",
    secondaryChartType: \\"line\\"
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - dual axis multiple measures without slicingcolumn-area 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const secondaryMeasures = [
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const config = {
    primaryChartType: \\"column\\",
    secondaryChartType: \\"area\\"
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - dual axis multiple measures without slicingcolumn-column 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const secondaryMeasures = [
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const config = {
    primaryChartType: \\"column\\",
    secondaryChartType: \\"column\\"
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - dual axis multiple measures without slicingcolumn-line 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const secondaryMeasures = [
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const config = {
    primaryChartType: \\"column\\",
    secondaryChartType: \\"line\\"
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - dual axis multiple measures without slicingline-area 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const secondaryMeasures = [
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const config = {
    primaryChartType: \\"line\\",
    secondaryChartType: \\"area\\"
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - dual axis multiple measures without slicingline-column 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const secondaryMeasures = [
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const config = {
    primaryChartType: \\"line\\",
    secondaryChartType: \\"column\\"
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - dual axis multiple measures without slicingline-line 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const secondaryMeasures = [
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const config = {
    primaryChartType: \\"line\\",
    secondaryChartType: \\"line\\"
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - dual axis two measures with slicingarea-area 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    primaryChartType: \\"area\\",
    secondaryChartType: \\"area\\"
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - dual axis two measures with slicingarea-column 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    primaryChartType: \\"area\\",
    secondaryChartType: \\"column\\"
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - dual axis two measures with slicingarea-line 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    primaryChartType: \\"area\\",
    secondaryChartType: \\"line\\"
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - dual axis two measures with slicingcolumn-area 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    primaryChartType: \\"column\\",
    secondaryChartType: \\"area\\"
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - dual axis two measures with slicingcolumn-column 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    primaryChartType: \\"column\\",
    secondaryChartType: \\"column\\"
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - dual axis two measures with slicingcolumn-line 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    primaryChartType: \\"column\\",
    secondaryChartType: \\"line\\"
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - dual axis two measures with slicingline-area 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    primaryChartType: \\"line\\",
    secondaryChartType: \\"area\\"
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - dual axis two measures with slicingline-column 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    primaryChartType: \\"line\\",
    secondaryChartType: \\"column\\"
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - dual axis two measures with slicingline-line 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    primaryChartType: \\"line\\",
    secondaryChartType: \\"line\\"
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - dual axis two measures without slicingarea-area 1`] = `
"import React from \\"react\\";
import { idRef, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const config = {
    primaryChartType: \\"area\\",
    secondaryChartType: \\"area\\"
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - dual axis two measures without slicingarea-column 1`] = `
"import React from \\"react\\";
import { idRef, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const config = {
    primaryChartType: \\"area\\",
    secondaryChartType: \\"column\\"
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - dual axis two measures without slicingarea-line 1`] = `
"import React from \\"react\\";
import { idRef, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const config = {
    primaryChartType: \\"area\\",
    secondaryChartType: \\"line\\"
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - dual axis two measures without slicingcolumn-area 1`] = `
"import React from \\"react\\";
import { idRef, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const config = {
    primaryChartType: \\"column\\",
    secondaryChartType: \\"area\\"
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - dual axis two measures without slicingcolumn-column 1`] = `
"import React from \\"react\\";
import { idRef, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const config = {
    primaryChartType: \\"column\\",
    secondaryChartType: \\"column\\"
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - dual axis two measures without slicingcolumn-line 1`] = `
"import React from \\"react\\";
import { idRef, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const config = {
    primaryChartType: \\"column\\",
    secondaryChartType: \\"line\\"
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - dual axis two measures without slicingline-area 1`] = `
"import React from \\"react\\";
import { idRef, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const config = {
    primaryChartType: \\"line\\",
    secondaryChartType: \\"area\\"
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - dual axis two measures without slicingline-column 1`] = `
"import React from \\"react\\";
import { idRef, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const config = {
    primaryChartType: \\"line\\",
    secondaryChartType: \\"column\\"
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - dual axis two measures without slicingline-line 1`] = `
"import React from \\"react\\";
import { idRef, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const config = {
    primaryChartType: \\"line\\",
    secondaryChartType: \\"line\\"
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - font 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const secondaryMeasures = [
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - legend position - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {legend: {position: \\"auto\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - legend position - disabled 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {legend: {enabled: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - legend position - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {legend: {position: \\"bottom\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - legend position - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {legend: {position: \\"left\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - legend position - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {legend: {position: \\"right\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - legend position - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {legend: {position: \\"top\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - multiple measures and no viewBy 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const secondaryMeasures = [
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - multiple primary and secondary measures with viewBy 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Min Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_min\\").aggregation(\\"min\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Median Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_median\\").aggregation(\\"median\\")),
    newMeasure(idRef(\\"fact.opportunitysnapshot.amount\\", \\"fact\\"), m => m.alias(\\"Max Amount\\").localId(\\"m_fact.opportunitysnapshot.amount_max\\").aggregation(\\"max\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - one primary and secondary measure no viewBy 1`] = `
"import React from \\"react\\";
import { idRef, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - one primary and secondary measure with viewBy 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - one primary and secondary measure with viewBy sorted by attr 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newAttributeSort, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const sortBy = [
    newAttributeSort(\\"a_label.product.id.name\\", \\"desc\\")
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                sortBy={sortBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - one primary and secondary measure with viewBy sorted by primary measure 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newMeasureSort } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const sortBy = [newMeasureSort(\\"m_aangOxLSeztu\\", \\"desc\\", [])];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                sortBy={sortBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - one primary and secondary measure with viewBy sorted by secondary measure 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newMeasureSort } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const secondaryMeasures = [
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const sortBy = [newMeasureSort(\\"m_acugFHNJgsBy\\", \\"desc\\", [])];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                sortBy={sortBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - one primary measure 1`] = `
"import React from \\"react\\";
import { idRef, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - one primary measure with viewBy 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - one secondary measure with viewBy 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const secondaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - stack primary measures to 100% with different chart type - area 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const secondaryMeasures = [
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    primaryChartType: \\"area\\",
    stackMeasuresToPercent: true
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - stack primary measures to 100% with different chart type - column 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const secondaryMeasures = [
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    primaryChartType: \\"column\\",
    stackMeasuresToPercent: true
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - stack primary measures when both column chart - normal stacking 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const secondaryMeasures = [
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    primaryChartType: \\"column\\",
    secondaryChartType: \\"column\\",
    stackMeasures: true
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - stack primary measures when both column chart - stack to 100% 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const secondaryMeasures = [
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    primaryChartType: \\"column\\",
    secondaryChartType: \\"column\\",
    stackMeasures: true,
    stackMeasuresToPercent: true
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - stack primary measures with different chart type - area 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const secondaryMeasures = [
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {primaryChartType: \\"area\\", stackMeasures: true};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - stack primary measures with different chart type - column 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const secondaryMeasures = [
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {primaryChartType: \\"column\\", stackMeasures: true};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - themed 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const secondaryMeasures = [
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                primaryMeasures={primaryMeasures}
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ComboChart - two secondary measure with viewBy 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ComboChart } from \\"@gooddata/sdk-ui-charts\\";

const secondaryMeasures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ComboChart
                secondaryMeasures={secondaryMeasures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart -  - custom palette 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - 200x200 - without data labels 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    dataLabels: {visible: true},
    legend: {enabled: false}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - 300x250 - auto data labels 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    dataLabels: {visible: true},
    legend: {enabled: false}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - 610x154 - Force position RIGHT - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - 610x154 - Force position RIGHT - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - 610x154 - Force position RIGHT - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - 610x154 - Force position RIGHT - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - 610x154 - Force position RIGHT - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - arithmetic measures 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - assign color to attributes 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - assign color to measures 1`] = `
"import React from \\"react\\";
import { idRef, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - data labels - auto visibility 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {dataLabels: {visible: \\"auto\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - data labels - default 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - data labels - forced hidden 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {dataLabels: {visible: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - data labels - forced visible 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {dataLabels: {visible: true}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - data labels - forced visible and german separators 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {dataLabels: {visible: true}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - font 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - legend position - single measure and viewBy - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {legend: {position: \\"auto\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - legend position - single measure and viewBy - disabled 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {legend: {enabled: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - legend position - single measure and viewBy - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {legend: {position: \\"bottom\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - legend position - single measure and viewBy - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {legend: {position: \\"left\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - legend position - single measure and viewBy - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {legend: {position: \\"right\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - legend position - single measure and viewBy - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {legend: {position: \\"top\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - legend position - two measures - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const config = {legend: {position: \\"auto\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - legend position - two measures - disabled 1`] = `
"import React from \\"react\\";
import { idRef, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const config = {legend: {enabled: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - legend position - two measures - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const config = {legend: {position: \\"bottom\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - legend position - two measures - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const config = {legend: {position: \\"left\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - legend position - two measures - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const config = {legend: {position: \\"right\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - legend position - two measures - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const config = {legend: {position: \\"top\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - single measure 1`] = `
"import React from \\"react\\";
import { idRef, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - single measure with viewBy 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - themed 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - two measures 1`] = `
"import React from \\"react\\";
import { idRef, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - vertical alignment - bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - vertical alignment - default 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - vertical alignment - middle 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for DonutChart - vertical alignment - top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { DonutChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <DonutChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for FunnelChart - arithmetic measures 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newMeasure } from \\"@gooddata/sdk-model\\";
import { FunnelChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for FunnelChart - assign color to attributes 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { FunnelChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for FunnelChart - assign color to measures 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newMeasure } from \\"@gooddata/sdk-model\\";
import { FunnelChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for FunnelChart - coloring - custom palette 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { FunnelChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for FunnelChart - font 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { FunnelChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for FunnelChart - single measure 1`] = `
"import React from \\"react\\";
import { idRef, newMeasure } from \\"@gooddata/sdk-model\\";
import { FunnelChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for FunnelChart - single measure with viewBy 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { FunnelChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for FunnelChart - single measure with viewBy sorted by attribute 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { FunnelChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for FunnelChart - themed 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { FunnelChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for FunnelChart - two measures 1`] = `
"import React from \\"react\\";
import { idRef, newMeasure } from \\"@gooddata/sdk-model\\";
import { FunnelChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <FunnelChart
                measures={measures}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Headline - font 1`] = `
"import React from \\"react\\";
import { idRef, newMeasure } from \\"@gooddata/sdk-model\\";
import { Headline } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Headline
                primaryMeasure={primaryMeasure}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Headline - single measure 1`] = `
"import React from \\"react\\";
import { idRef, newMeasure } from \\"@gooddata/sdk-model\\";
import { Headline } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Headline
                primaryMeasure={primaryMeasure}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Headline - themed 1`] = `
"import React from \\"react\\";
import { idRef, newMeasure } from \\"@gooddata/sdk-model\\";
import { Headline } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Headline
                primaryMeasure={primaryMeasure}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Headline - two measures 1`] = `
"import React from \\"react\\";
import { idRef, newMeasure } from \\"@gooddata/sdk-model\\";
import { Headline } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Headline
                primaryMeasure={primaryMeasure}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Headline - two measures one PoP 1`] = `
"import React from \\"react\\";
import { idRef, newMeasure } from \\"@gooddata/sdk-model\\";
import { Headline } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Headline
                primaryMeasure={primaryMeasure}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Headline - two measures with german separators 1`] = `
"import React from \\"react\\";
import { idRef, newMeasure } from \\"@gooddata/sdk-model\\";
import { Headline } from \\"@gooddata/sdk-ui-charts\\";

const primaryMeasure = newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Headline
                primaryMeasure={primaryMeasure}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Heatmap - 180x400 - Force position TOP, minimised variant - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newAttributeSort, newMeasure } from \\"@gooddata/sdk-model\\";
import { Heatmap } from \\"@gooddata/sdk-ui-charts\\";

const measure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const rows = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const columns = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const sortBy = [
    newAttributeSort(\\"a_label.product.id.name\\", \\"desc\\")
];
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Heatmap - 180x400 - Force position TOP, minimised variant - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newAttributeSort, newMeasure } from \\"@gooddata/sdk-model\\";
import { Heatmap } from \\"@gooddata/sdk-ui-charts\\";

const measure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const rows = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const columns = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const sortBy = [
    newAttributeSort(\\"a_label.product.id.name\\", \\"desc\\")
];
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Heatmap - 180x400 - Force position TOP, minimised variant - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newAttributeSort, newMeasure } from \\"@gooddata/sdk-model\\";
import { Heatmap } from \\"@gooddata/sdk-ui-charts\\";

const measure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const rows = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const columns = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const sortBy = [
    newAttributeSort(\\"a_label.product.id.name\\", \\"desc\\")
];
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Heatmap - 180x400 - Force position TOP, minimised variant - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newAttributeSort, newMeasure } from \\"@gooddata/sdk-model\\";
import { Heatmap } from \\"@gooddata/sdk-ui-charts\\";

const measure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const rows = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const columns = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const sortBy = [
    newAttributeSort(\\"a_label.product.id.name\\", \\"desc\\")
];
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Heatmap - 180x400 - Force position TOP, minimised variant - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newAttributeSort, newMeasure } from \\"@gooddata/sdk-model\\";
import { Heatmap } from \\"@gooddata/sdk-ui-charts\\";

const measure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const rows = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const columns = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const sortBy = [
    newAttributeSort(\\"a_label.product.id.name\\", \\"desc\\")
];
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Heatmap - 620x400 - Position respects configuration, standard variant - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newAttributeSort, newMeasure } from \\"@gooddata/sdk-model\\";
import { Heatmap } from \\"@gooddata/sdk-ui-charts\\";

const measure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const rows = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const columns = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const sortBy = [
    newAttributeSort(\\"a_label.product.id.name\\", \\"desc\\")
];
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Heatmap - 620x400 - Position respects configuration, standard variant - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newAttributeSort, newMeasure } from \\"@gooddata/sdk-model\\";
import { Heatmap } from \\"@gooddata/sdk-ui-charts\\";

const measure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const rows = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const columns = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const sortBy = [
    newAttributeSort(\\"a_label.product.id.name\\", \\"desc\\")
];
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Heatmap - 620x400 - Position respects configuration, standard variant - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newAttributeSort, newMeasure } from \\"@gooddata/sdk-model\\";
import { Heatmap } from \\"@gooddata/sdk-ui-charts\\";

const measure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const rows = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const columns = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const sortBy = [
    newAttributeSort(\\"a_label.product.id.name\\", \\"desc\\")
];
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Heatmap - 620x400 - Position respects configuration, standard variant - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newAttributeSort, newMeasure } from \\"@gooddata/sdk-model\\";
import { Heatmap } from \\"@gooddata/sdk-ui-charts\\";

const measure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const rows = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const columns = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const sortBy = [
    newAttributeSort(\\"a_label.product.id.name\\", \\"desc\\")
];
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Heatmap - 620x400 - Position respects configuration, standard variant - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newAttributeSort, newMeasure } from \\"@gooddata/sdk-model\\";
import { Heatmap } from \\"@gooddata/sdk-ui-charts\\";

const measure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const rows = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const columns = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const sortBy = [
    newAttributeSort(\\"a_label.product.id.name\\", \\"desc\\")
];
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Heatmap - assign color to measures 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newAttributeSort, newMeasure } from \\"@gooddata/sdk-model\\";
import { Heatmap } from \\"@gooddata/sdk-ui-charts\\";

const measure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const rows = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const columns = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const sortBy = [
    newAttributeSort(\\"a_label.product.id.name\\", \\"desc\\")
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Heatmap - axis name configuration - high 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newAttributeSort, newMeasure } from \\"@gooddata/sdk-model\\";
import { Heatmap } from \\"@gooddata/sdk-ui-charts\\";

const measure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const rows = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const columns = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const sortBy = [
    newAttributeSort(\\"a_label.product.id.name\\", \\"desc\\")
];
const config = {
    secondary_xaxis: {name: {position: \\"right\\"}},
    secondary_yaxis: {name: {position: \\"top\\"}},
    xaxis: {name: {position: \\"right\\"}},
    yaxis: {name: {position: \\"top\\"}}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Heatmap - axis name configuration - invisible 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newAttributeSort, newMeasure } from \\"@gooddata/sdk-model\\";
import { Heatmap } from \\"@gooddata/sdk-ui-charts\\";

const measure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const rows = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const columns = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const sortBy = [
    newAttributeSort(\\"a_label.product.id.name\\", \\"desc\\")
];
const config = {
    secondary_xaxis: {name: {position: \\"center\\"}},
    secondary_yaxis: {name: {position: \\"center\\"}},
    xaxis: {name: {position: \\"center\\"}},
    yaxis: {name: {position: \\"center\\"}}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Heatmap - axis name configuration - low 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newAttributeSort, newMeasure } from \\"@gooddata/sdk-model\\";
import { Heatmap } from \\"@gooddata/sdk-ui-charts\\";

const measure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const rows = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const columns = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const sortBy = [
    newAttributeSort(\\"a_label.product.id.name\\", \\"desc\\")
];
const config = {
    secondary_xaxis: {name: {position: \\"left\\"}},
    secondary_yaxis: {name: {position: \\"bottom\\"}},
    xaxis: {name: {position: \\"left\\"}},
    yaxis: {name: {position: \\"bottom\\"}}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Heatmap - axis name configuration - middle 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newAttributeSort, newMeasure } from \\"@gooddata/sdk-model\\";
import { Heatmap } from \\"@gooddata/sdk-ui-charts\\";

const measure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const rows = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const columns = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const sortBy = [
    newAttributeSort(\\"a_label.product.id.name\\", \\"desc\\")
];
const config = {
    secondary_xaxis: {name: {position: \\"center\\"}},
    secondary_yaxis: {name: {position: \\"center\\"}},
    xaxis: {name: {position: \\"center\\"}},
    yaxis: {name: {position: \\"center\\"}}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Heatmap - coloring - custom palette 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newAttributeSort, newMeasure } from \\"@gooddata/sdk-model\\";
import { Heatmap } from \\"@gooddata/sdk-ui-charts\\";

const measure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const rows = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const columns = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const sortBy = [
    newAttributeSort(\\"a_label.product.id.name\\", \\"desc\\")
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Heatmap - data labels - auto visibility 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newAttributeSort, newMeasure } from \\"@gooddata/sdk-model\\";
import { Heatmap } from \\"@gooddata/sdk-ui-charts\\";

const measure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const rows = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const columns = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const sortBy = [
    newAttributeSort(\\"a_label.product.id.name\\", \\"desc\\")
];
const config = {dataLabels: {visible: \\"auto\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Heatmap - data labels - default 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newAttributeSort, newMeasure } from \\"@gooddata/sdk-model\\";
import { Heatmap } from \\"@gooddata/sdk-ui-charts\\";

const measure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const rows = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const columns = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const sortBy = [
    newAttributeSort(\\"a_label.product.id.name\\", \\"desc\\")
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Heatmap - data labels - forced hidden 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newAttributeSort, newMeasure } from \\"@gooddata/sdk-model\\";
import { Heatmap } from \\"@gooddata/sdk-ui-charts\\";

const measure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const rows = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const columns = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const sortBy = [
    newAttributeSort(\\"a_label.product.id.name\\", \\"desc\\")
];
const config = {dataLabels: {visible: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Heatmap - data labels - forced visible 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newAttributeSort, newMeasure } from \\"@gooddata/sdk-model\\";
import { Heatmap } from \\"@gooddata/sdk-ui-charts\\";

const measure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const rows = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const columns = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const sortBy = [
    newAttributeSort(\\"a_label.product.id.name\\", \\"desc\\")
];
const config = {dataLabels: {visible: true}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Heatmap - data labels - forced visible and german separators 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newAttributeSort, newMeasure } from \\"@gooddata/sdk-model\\";
import { Heatmap } from \\"@gooddata/sdk-ui-charts\\";

const measure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const rows = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const columns = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const sortBy = [
    newAttributeSort(\\"a_label.product.id.name\\", \\"desc\\")
];
const config = {dataLabels: {visible: true}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Heatmap - font 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newAttributeSort, newMeasure } from \\"@gooddata/sdk-model\\";
import { Heatmap } from \\"@gooddata/sdk-ui-charts\\";

const measure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const rows = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const columns = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const sortBy = [
    newAttributeSort(\\"a_label.product.id.name\\", \\"desc\\")
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Heatmap - legend position - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newAttributeSort, newMeasure } from \\"@gooddata/sdk-model\\";
import { Heatmap } from \\"@gooddata/sdk-ui-charts\\";

const measure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const rows = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const columns = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const sortBy = [
    newAttributeSort(\\"a_label.product.id.name\\", \\"desc\\")
];
const config = {legend: {position: \\"auto\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Heatmap - legend position - disabled 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newAttributeSort, newMeasure } from \\"@gooddata/sdk-model\\";
import { Heatmap } from \\"@gooddata/sdk-ui-charts\\";

const measure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const rows = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const columns = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const sortBy = [
    newAttributeSort(\\"a_label.product.id.name\\", \\"desc\\")
];
const config = {legend: {enabled: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Heatmap - legend position - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newAttributeSort, newMeasure } from \\"@gooddata/sdk-model\\";
import { Heatmap } from \\"@gooddata/sdk-ui-charts\\";

const measure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const rows = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const columns = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const sortBy = [
    newAttributeSort(\\"a_label.product.id.name\\", \\"desc\\")
];
const config = {legend: {position: \\"bottom\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Heatmap - legend position - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newAttributeSort, newMeasure } from \\"@gooddata/sdk-model\\";
import { Heatmap } from \\"@gooddata/sdk-ui-charts\\";

const measure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const rows = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const columns = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const sortBy = [
    newAttributeSort(\\"a_label.product.id.name\\", \\"desc\\")
];
const config = {legend: {position: \\"left\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Heatmap - legend position - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newAttributeSort, newMeasure } from \\"@gooddata/sdk-model\\";
import { Heatmap } from \\"@gooddata/sdk-ui-charts\\";

const measure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const rows = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const columns = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const sortBy = [
    newAttributeSort(\\"a_label.product.id.name\\", \\"desc\\")
];
const config = {legend: {position: \\"right\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Heatmap - legend position - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newAttributeSort, newMeasure } from \\"@gooddata/sdk-model\\";
import { Heatmap } from \\"@gooddata/sdk-ui-charts\\";

const measure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const rows = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const columns = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const sortBy = [
    newAttributeSort(\\"a_label.product.id.name\\", \\"desc\\")
];
const config = {legend: {position: \\"top\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Heatmap - measure and columns 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Heatmap } from \\"@gooddata/sdk-ui-charts\\";

const measure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const columns = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                columns={columns}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Heatmap - measure and rows 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newAttributeSort, newMeasure } from \\"@gooddata/sdk-model\\";
import { Heatmap } from \\"@gooddata/sdk-ui-charts\\";

const measure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const rows = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const sortBy = [
    newAttributeSort(\\"a_label.product.id.name\\", \\"desc\\")
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                sortBy={sortBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Heatmap - measure only 1`] = `
"import React from \\"react\\";
import { idRef, newMeasure } from \\"@gooddata/sdk-model\\";
import { Heatmap } from \\"@gooddata/sdk-ui-charts\\";

const measure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Heatmap - measure, rows and columns 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newAttributeSort, newMeasure } from \\"@gooddata/sdk-model\\";
import { Heatmap } from \\"@gooddata/sdk-ui-charts\\";

const measure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const rows = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const columns = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const sortBy = [
    newAttributeSort(\\"a_label.product.id.name\\", \\"desc\\")
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Heatmap - measure, rows and columns with null data points 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newAttributeSort, newMeasure } from \\"@gooddata/sdk-model\\";
import { Heatmap } from \\"@gooddata/sdk-ui-charts\\";

const measure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const rows = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const columns = newAttribute(idRef(\\"closed.aag81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_closed.aag81lMifn6q\\"));
const sortBy = [
    newAttributeSort(\\"a_label.product.id.name\\", \\"desc\\")
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Heatmap - themed 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newAttributeSort, newMeasure } from \\"@gooddata/sdk-model\\";
import { Heatmap } from \\"@gooddata/sdk-ui-charts\\";

const measure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const rows = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const columns = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const sortBy = [
    newAttributeSort(\\"a_label.product.id.name\\", \\"desc\\")
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Heatmap - themed with null values 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newAttributeSort, newMeasure } from \\"@gooddata/sdk-model\\";
import { Heatmap } from \\"@gooddata/sdk-ui-charts\\";

const measure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const rows = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const columns = newAttribute(idRef(\\"closed.aag81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_closed.aag81lMifn6q\\"));
const sortBy = [
    newAttributeSort(\\"a_label.product.id.name\\", \\"desc\\")
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Heatmap
                measure={measure}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - 40x70 - without x axis, without y axis (very small container) 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {legend: {enabled: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - 60x354 - without y axis labels 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {legend: {enabled: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - 60x354 - without y axis labels, with y axis title 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {legend: {enabled: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - 140x354 - without y axis title 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {legend: {enabled: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - 610x154 - Force position RIGHT - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - 610x154 - Force position RIGHT - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - 610x154 - Force position RIGHT - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - 610x154 - Force position RIGHT - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - 610x154 - Force position RIGHT - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - 650x90 - without x axis labels 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {legend: {enabled: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - 650x140 - without x axis title 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {legend: {enabled: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newMeasure(idRef(\\"abEgMnq5hyJQ\\", \\"measure\\"), m => m.localId(\\"m_abEgMnq5hyJQ\\")),
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\")),
    newMeasure(idRef(\\"abxgDICQav2J\\", \\"measure\\"), m => m.localId(\\"m_abxgDICQav2J\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - Y axis min/max configuration 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {yaxis: {max: \\"25000000\\", min: \\"5000000\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - Y axis on the right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {
    secondary_yaxis: {measures: [\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"]}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - arithmetic measures 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - assign color to measures 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - coloring - custom palette 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - data labels - auto visibility 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {dataLabels: {visible: \\"auto\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - data labels - default 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - data labels - forced hidden 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {dataLabels: {visible: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - data labels - forced visible 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {dataLabels: {visible: true}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - data labels - forced visible and german separators 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {dataLabels: {visible: true}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - data points - dense chart - auto visibility 1`] = `
"import React from \\"react\\";
import { idRef, localIdRef, newAttribute, newMeasure, newMeasureValueFilter } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const trendBy = newAttribute(idRef(\\"label.opportunity.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.opportunity.id.name\\"));
const filters = [
    newMeasureValueFilter(localIdRef(\\"m_aangOxLSeztu\\"), \\"GREATER_THAN\\", 100000)
];
const config = {dataPoints: {visible: \\"auto\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - data points - dense chart - default 1`] = `
"import React from \\"react\\";
import { idRef, localIdRef, newAttribute, newMeasure, newMeasureValueFilter } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const trendBy = newAttribute(idRef(\\"label.opportunity.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.opportunity.id.name\\"));
const filters = [
    newMeasureValueFilter(localIdRef(\\"m_aangOxLSeztu\\"), \\"GREATER_THAN\\", 100000)
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                filters={filters}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - data points - dense chart - forced hidden 1`] = `
"import React from \\"react\\";
import { idRef, localIdRef, newAttribute, newMeasure, newMeasureValueFilter } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const trendBy = newAttribute(idRef(\\"label.opportunity.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.opportunity.id.name\\"));
const filters = [
    newMeasureValueFilter(localIdRef(\\"m_aangOxLSeztu\\"), \\"GREATER_THAN\\", 100000)
];
const config = {dataPoints: {visible: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - data points - dense chart - forced visible 1`] = `
"import React from \\"react\\";
import { idRef, localIdRef, newAttribute, newMeasure, newMeasureValueFilter } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const trendBy = newAttribute(idRef(\\"label.opportunity.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.opportunity.id.name\\"));
const filters = [
    newMeasureValueFilter(localIdRef(\\"m_aangOxLSeztu\\"), \\"GREATER_THAN\\", 100000)
];
const config = {dataPoints: {visible: true}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - data points - sparse chart - auto visibility 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {dataPoints: {visible: \\"auto\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - data points - sparse chart - default 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - data points - sparse chart - forced hidden 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {dataPoints: {visible: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - data points - sparse chart - forced visible 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {dataPoints: {visible: true}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - dual axes with one right measure 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {
    secondary_yaxis: {measures: [\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"]}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - dual axis name configuration - high 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {
    secondary_xaxis: {name: {position: \\"right\\"}},
    secondary_yaxis: {
        measures: [\\"m_acugFHNJgsBy\\"],
        name: {position: \\"top\\"}
    },
    xaxis: {name: {position: \\"right\\"}},
    yaxis: {name: {position: \\"top\\"}}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - dual axis name configuration - invisible 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {
    secondary_xaxis: {name: {position: \\"center\\"}},
    secondary_yaxis: {
        measures: [\\"m_acugFHNJgsBy\\"],
        name: {position: \\"center\\"}
    },
    xaxis: {name: {position: \\"center\\"}},
    yaxis: {name: {position: \\"center\\"}}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - dual axis name configuration - low 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {
    secondary_xaxis: {name: {position: \\"left\\"}},
    secondary_yaxis: {
        measures: [\\"m_acugFHNJgsBy\\"],
        name: {position: \\"bottom\\"}
    },
    xaxis: {name: {position: \\"left\\"}},
    yaxis: {name: {position: \\"bottom\\"}}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - dual axis name configuration - middle 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {
    secondary_xaxis: {name: {position: \\"center\\"}},
    secondary_yaxis: {
        measures: [\\"m_acugFHNJgsBy\\"],
        name: {position: \\"center\\"}
    },
    xaxis: {name: {position: \\"center\\"}},
    yaxis: {name: {position: \\"center\\"}}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - font 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - legend position - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {legend: {position: \\"auto\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - legend position - disabled 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {legend: {enabled: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - legend position - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {legend: {position: \\"bottom\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - legend position - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {legend: {position: \\"left\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - legend position - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {legend: {position: \\"right\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - legend position - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {legend: {position: \\"top\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - single axis name configuration - high 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {
    secondary_xaxis: {name: {position: \\"right\\"}},
    secondary_yaxis: {name: {position: \\"top\\"}},
    xaxis: {name: {position: \\"right\\"}},
    yaxis: {name: {position: \\"top\\"}}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - single axis name configuration - invisible 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {
    secondary_xaxis: {name: {position: \\"center\\"}},
    secondary_yaxis: {name: {position: \\"center\\"}},
    xaxis: {name: {position: \\"center\\"}},
    yaxis: {name: {position: \\"center\\"}}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - single axis name configuration - low 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {
    secondary_xaxis: {name: {position: \\"left\\"}},
    secondary_yaxis: {name: {position: \\"bottom\\"}},
    xaxis: {name: {position: \\"left\\"}},
    yaxis: {name: {position: \\"bottom\\"}}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - single axis name configuration - middle 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const config = {
    secondary_xaxis: {name: {position: \\"center\\"}},
    secondary_yaxis: {name: {position: \\"center\\"}},
    xaxis: {name: {position: \\"center\\"}},
    yaxis: {name: {position: \\"center\\"}}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - single measure 1`] = `
"import React from \\"react\\";
import { idRef, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - single measure with % and trendBy 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - single measure with trendBy 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - single measure with trendBy and segmentBy 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                segmentBy={segmentBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - themed 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - two measures with trendBy 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - two measures with trendBy and sort by attribute 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newAttributeSort, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const sortBy = [
    newAttributeSort(\\"a_created.aci81lMifn6q\\", \\"desc\\")
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                sortBy={sortBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - two measures with trendBy and sort by measure 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newMeasureSort } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const trendBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const sortBy = [newMeasureSort(\\"m_acugFHNJgsBy\\", \\"asc\\", [])];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                sortBy={sortBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - with one measure and segment by date 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const segmentBy = newAttribute(idRef(\\"created.aag81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aag81lMifn6q\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                segmentBy={segmentBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for LineChart - with one measure and trend by date and segment by date 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { LineChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const trendBy = newAttribute(idRef(\\"created.aag81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aag81lMifn6q\\"));
const segmentBy = newAttribute(idRef(\\"closed.aag81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_closed.aag81lMifn6q\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <LineChart
                measures={measures}
                trendBy={trendBy}
                segmentBy={segmentBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - 200x200 - without data labels 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    dataLabels: {visible: true},
    legend: {enabled: false}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - 300x250 - auto data labels 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    dataLabels: {visible: true},
    legend: {enabled: false}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - 610x154 - Force position RIGHT - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - 610x154 - Force position RIGHT - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - 610x154 - Force position RIGHT - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - 610x154 - Force position RIGHT - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - 610x154 - Force position RIGHT - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - arithmetic measures 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - assign color to attributes 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - assign color to measures 1`] = `
"import React from \\"react\\";
import { idRef, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - coloring - custom palette 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - data labels - auto visibility 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {dataLabels: {visible: \\"auto\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - data labels - default 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - data labels - forced hidden 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {dataLabels: {visible: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - data labels - forced visible 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {dataLabels: {visible: true}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - data labels - forced visible and german separators 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {dataLabels: {visible: true}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - font 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - legend position - single measure and viewBy - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {legend: {position: \\"auto\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - legend position - single measure and viewBy - disabled 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {legend: {enabled: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - legend position - single measure and viewBy - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {legend: {position: \\"bottom\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - legend position - single measure and viewBy - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {legend: {position: \\"left\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - legend position - single measure and viewBy - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {legend: {position: \\"right\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - legend position - single measure and viewBy - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {legend: {position: \\"top\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - legend position - two measures - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const config = {legend: {position: \\"auto\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - legend position - two measures - disabled 1`] = `
"import React from \\"react\\";
import { idRef, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const config = {legend: {enabled: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - legend position - two measures - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const config = {legend: {position: \\"bottom\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - legend position - two measures - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const config = {legend: {position: \\"left\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - legend position - two measures - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const config = {legend: {position: \\"right\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - legend position - two measures - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const config = {legend: {position: \\"top\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - single measure 1`] = `
"import React from \\"react\\";
import { idRef, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - single measure with viewBy 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - themed 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - two measures 1`] = `
"import React from \\"react\\";
import { idRef, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - vertical alignment - bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - vertical alignment - default 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - vertical alignment - middle 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PieChart - vertical alignment - top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PieChart } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PieChart
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - arithmetic measures 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\")),
    newArithmeticMeasure([
    \\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\",
    \\"m_acugFHNJgsBy\\"
], \\"ratio\\", m => m.alias(\\"Ratio of Won and Lost\\").localId(\\"m_68d94d71b9317a58cd6c5b9a3f71f488\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {columnSizing: undefined};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - empty values 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.department\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.department\\"))
];
const columns = [
    newAttribute(idRef(\\"label.stage.name.stagename\\", \\"displayForm\\"), a => a.localId(\\"a_label.stage.name.stagename\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const config = {columnSizing: undefined};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - font 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.department\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.department\\"))
];
const columns = [
    newAttribute(idRef(\\"label.stage.name.stagename\\", \\"displayForm\\"), a => a.localId(\\"a_label.stage.name.stagename\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const config = {columnSizing: undefined};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - german number format 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.department\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.department\\"))
];
const columns = [
    newAttribute(idRef(\\"label.stage.name.stagename\\", \\"displayForm\\"), a => a.localId(\\"a_label.stage.name.stagename\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const config = {columnSizing: undefined};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - measure format with colors 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.format(\\"[backgroundColor=ffff00][green]#,##0.00 €\\").localId(\\"m_aangOxLSeztu\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.department\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.department\\"))
];
const columns = [
    newAttribute(idRef(\\"label.stage.name.stagename\\", \\"displayForm\\"), a => a.localId(\\"a_label.stage.name.stagename\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const config = {columnSizing: undefined};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - no totals and max height 200 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.department\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.department\\"))
];
const columns = [
    newAttribute(idRef(\\"label.stage.name.stagename\\", \\"displayForm\\"), a => a.localId(\\"a_label.stage.name.stagename\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const config = {columnSizing: undefined};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - no totals and max height 300 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.department\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.department\\"))
];
const columns = [
    newAttribute(idRef(\\"label.stage.name.stagename\\", \\"displayForm\\"), a => a.localId(\\"a_label.stage.name.stagename\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const config = {columnSizing: undefined};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - no totals and no grouping 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.department\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.department\\"))
];
const columns = [
    newAttribute(idRef(\\"label.stage.name.stagename\\", \\"displayForm\\"), a => a.localId(\\"a_label.stage.name.stagename\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const config = {columnSizing: undefined};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - one measure and repeating row attributes on different positions 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\")),
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name_1\\"))
];
const config = {columnSizing: undefined};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - simple table with attribute and metric column size 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { newWidthForAttributeColumn, PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    columnSizing: {
        columnWidths: [
            newWidthForAttributeColumn(a_label.product.id.name, 400),
            {
                measureColumnWidthItem: {
                    locators: [
                        {
                            measureLocatorItem: {measureIdentifier: \\"m_aangOxLSeztu\\"}
                        }
                    ],
                    width: {value: 60}
                }
            }
        ]
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - simple table with attribute and metric column size 2`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { newWidthForAttributeColumn, PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    columnSizing: {
        columnWidths: [
            newWidthForAttributeColumn(a_label.product.id.name, 400),
            {
                measureColumnWidthItem: {
                    locators: [
                        {
                            measureLocatorItem: {measureIdentifier: \\"m_aangOxLSeztu\\"}
                        }
                    ],
                    width: {value: 60}
                }
            }
        ]
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - simple table with attribute and metric column size 3`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { newWidthForAttributeColumn, PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    columnSizing: {
        columnWidths: [
            newWidthForAttributeColumn(a_label.product.id.name, 400),
            {
                measureColumnWidthItem: {
                    locators: [
                        {
                            measureLocatorItem: {measureIdentifier: \\"m_aangOxLSeztu\\"}
                        }
                    ],
                    width: {value: 60}
                }
            }
        ]
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - simple table with attribute and metric column size 4`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { newWidthForAttributeColumn, PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    columnSizing: {
        columnWidths: [
            newWidthForAttributeColumn(a_label.product.id.name, 400),
            {
                measureColumnWidthItem: {
                    locators: [
                        {
                            measureLocatorItem: {measureIdentifier: \\"m_aangOxLSeztu\\"}
                        }
                    ],
                    width: {value: 60}
                }
            }
        ]
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - simple table with custom attribute column size 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { newWidthForAttributeColumn, PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    columnSizing: {
        columnWidths: [
            newWidthForAttributeColumn(a_label.product.id.name, 400)
        ]
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - simple table with custom attribute column size 2`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { newWidthForAttributeColumn, PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    columnSizing: {
        columnWidths: [
            newWidthForAttributeColumn(a_label.product.id.name, 400)
        ]
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - simple table with custom attribute column size 3`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { newWidthForAttributeColumn, PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    columnSizing: {
        columnWidths: [
            newWidthForAttributeColumn(a_label.product.id.name, 400)
        ]
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - simple table with custom attribute column size 4`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { newWidthForAttributeColumn, PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    columnSizing: {
        columnWidths: [
            newWidthForAttributeColumn(a_label.product.id.name, 400)
        ]
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - simple table with custom metric column size 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    columnSizing: {
        columnWidths: [
            {
                measureColumnWidthItem: {
                    locators: [
                        {
                            measureLocatorItem: {measureIdentifier: \\"m_aangOxLSeztu\\"}
                        }
                    ],
                    width: {value: 60}
                }
            }
        ]
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - simple table with custom metric column size 2`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    columnSizing: {
        columnWidths: [
            {
                measureColumnWidthItem: {
                    locators: [
                        {
                            measureLocatorItem: {measureIdentifier: \\"m_aangOxLSeztu\\"}
                        }
                    ],
                    width: {value: 60}
                }
            }
        ]
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - simple table with custom metric column size 3`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    columnSizing: {
        columnWidths: [
            {
                measureColumnWidthItem: {
                    locators: [
                        {
                            measureLocatorItem: {measureIdentifier: \\"m_aangOxLSeztu\\"}
                        }
                    ],
                    width: {value: 60}
                }
            }
        ]
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - simple table with custom metric column size 4`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {
    columnSizing: {
        columnWidths: [
            {
                measureColumnWidthItem: {
                    locators: [
                        {
                            measureLocatorItem: {measureIdentifier: \\"m_aangOxLSeztu\\"}
                        }
                    ],
                    width: {value: 60}
                }
            }
        ]
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - single attribute 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {columnSizing: undefined};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                rows={rows}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - single column 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const columns = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {columnSizing: undefined};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - single measure 1`] = `
"import React from \\"react\\";
import { idRef, newMeasure } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const config = {columnSizing: undefined};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - single measure and multiple grand totals 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newTotal } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.department\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.department\\"))
];
const columns = [
    newAttribute(idRef(\\"label.stage.name.stagename\\", \\"displayForm\\"), a => a.localId(\\"a_label.stage.name.stagename\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const totals = [
    newTotal(\\"sum\\", \\"m_aangOxLSeztu\\", \\"a_label.product.id.name\\"),
    newTotal(\\"min\\", \\"m_aangOxLSeztu\\", \\"a_label.product.id.name\\"),
    newTotal(\\"max\\", \\"m_aangOxLSeztu\\", \\"a_label.product.id.name\\"),
    newTotal(\\"nat\\", \\"m_aangOxLSeztu\\", \\"a_label.product.id.name\\")
];
const config = {columnSizing: undefined};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                totals={totals}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - single measure and single grand total 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newTotal } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.department\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.department\\"))
];
const columns = [
    newAttribute(idRef(\\"label.stage.name.stagename\\", \\"displayForm\\"), a => a.localId(\\"a_label.stage.name.stagename\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const totals = [
    newTotal(\\"sum\\", \\"m_aangOxLSeztu\\", \\"a_label.product.id.name\\")
];
const config = {columnSizing: undefined};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                totals={totals}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - single measure pivot sorted by first row attr 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newAttributeSort, newMeasure } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.department\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.department\\"))
];
const columns = [
    newAttribute(idRef(\\"label.stage.name.stagename\\", \\"displayForm\\"), a => a.localId(\\"a_label.stage.name.stagename\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const sortBy = [
    newAttributeSort(\\"a_label.product.id.name\\", \\"desc\\")
];
const config = {columnSizing: undefined};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - single measure pivot sorted by second row attr 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newAttributeSort, newMeasure } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.department\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.department\\"))
];
const columns = [
    newAttribute(idRef(\\"label.stage.name.stagename\\", \\"displayForm\\"), a => a.localId(\\"a_label.stage.name.stagename\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const sortBy = [
    newAttributeSort(\\"a_label.owner.department\\", \\"desc\\")
];
const config = {columnSizing: undefined};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - single measure pivot with grouping sorted by first row attr 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newAttributeSort, newMeasure } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const rows = [
    newAttribute(idRef(\\"label.owner.department\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.department\\")),
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const sortBy = [
    newAttributeSort(\\"a_label.owner.department\\", \\"desc\\")
];
const config = {columnSizing: undefined};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - single measure pivot with grouping sorted by measure 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newMeasureSort } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const rows = [
    newAttribute(idRef(\\"label.owner.department\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.department\\")),
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const sortBy = [newMeasureSort(\\"m_aangOxLSeztu\\", \\"desc\\", [])];
const config = {columnSizing: undefined};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - single measure pivot with grouping sorted by second row attr 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newAttributeSort, newMeasure } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const rows = [
    newAttribute(idRef(\\"label.owner.department\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.department\\")),
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const sortBy = [
    newAttributeSort(\\"a_label.product.id.name\\", \\"desc\\")
];
const config = {columnSizing: undefined};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - single measure with column attribute 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const columns = [
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const config = {columnSizing: undefined};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - single measure with row and column attributes 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const columns = [
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const config = {columnSizing: undefined};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - single measure with row attribute 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {columnSizing: undefined};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - single measure with two row and one column attributes 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.department\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.department\\"))
];
const columns = [
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const config = {columnSizing: undefined};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - single measure with two row and two column attributes 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.department\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.department\\"))
];
const columns = [
    newAttribute(idRef(\\"label.stage.name.stagename\\", \\"displayForm\\"), a => a.localId(\\"a_label.stage.name.stagename\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const config = {columnSizing: undefined};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - table with multiple measure columns and weak measure size 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.department\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.department\\"))
];
const columns = [
    newAttribute(idRef(\\"label.stage.name.stagename\\", \\"displayForm\\"), a => a.localId(\\"a_label.stage.name.stagename\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const config = {
    columnSizing: {
        columnWidths: [
            {
                measureColumnWidthItem: {
                    locator: {
                        measureLocatorItem: {measureIdentifier: \\"m_aangOxLSeztu\\"}
                    },
                    width: {value: 60}
                }
            }
        ]
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - table with multiple measure columns and weak measure size 2`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.department\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.department\\"))
];
const columns = [
    newAttribute(idRef(\\"label.stage.name.stagename\\", \\"displayForm\\"), a => a.localId(\\"a_label.stage.name.stagename\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const config = {
    columnSizing: {
        columnWidths: [
            {
                measureColumnWidthItem: {
                    locator: {
                        measureLocatorItem: {measureIdentifier: \\"m_aangOxLSeztu\\"}
                    },
                    width: {value: 60}
                }
            }
        ]
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - table with multiple measure columns and weak measure size 3`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.department\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.department\\"))
];
const columns = [
    newAttribute(idRef(\\"label.stage.name.stagename\\", \\"displayForm\\"), a => a.localId(\\"a_label.stage.name.stagename\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const config = {
    columnSizing: {
        columnWidths: [
            {
                measureColumnWidthItem: {
                    locator: {
                        measureLocatorItem: {measureIdentifier: \\"m_aangOxLSeztu\\"}
                    },
                    width: {value: 60}
                }
            }
        ]
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - table with multiple measure columns and weak measure size 4`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.department\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.department\\"))
];
const columns = [
    newAttribute(idRef(\\"label.stage.name.stagename\\", \\"displayForm\\"), a => a.localId(\\"a_label.stage.name.stagename\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const config = {
    columnSizing: {
        columnWidths: [
            {
                measureColumnWidthItem: {
                    locator: {
                        measureLocatorItem: {measureIdentifier: \\"m_aangOxLSeztu\\"}
                    },
                    width: {value: 60}
                }
            }
        ]
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - themed 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.department\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.department\\"))
];
const columns = [
    newAttribute(idRef(\\"label.stage.name.stagename\\", \\"displayForm\\"), a => a.localId(\\"a_label.stage.name.stagename\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const config = {columnSizing: undefined};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - totals and max height 200 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newTotal } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.department\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.department\\"))
];
const columns = [
    newAttribute(idRef(\\"label.opportunitysnapshot.forecastcategory\\", \\"displayForm\\"), a => a.localId(\\"a_label.opportunitysnapshot.forecastcategory\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const totals = [
    newTotal(\\"sum\\", \\"m_aangOxLSeztu\\", \\"a_label.product.id.name\\"),
    newTotal(\\"sum\\", \\"m_acugFHNJgsBy\\", \\"a_label.product.id.name\\")
];
const config = {columnSizing: undefined};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                totals={totals}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - totals and max height 300 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newTotal } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.department\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.department\\"))
];
const columns = [
    newAttribute(idRef(\\"label.opportunitysnapshot.forecastcategory\\", \\"displayForm\\"), a => a.localId(\\"a_label.opportunitysnapshot.forecastcategory\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const totals = [
    newTotal(\\"sum\\", \\"m_aangOxLSeztu\\", \\"a_label.product.id.name\\"),
    newTotal(\\"sum\\", \\"m_acugFHNJgsBy\\", \\"a_label.product.id.name\\")
];
const config = {columnSizing: undefined};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                totals={totals}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - totals and max height 800 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newTotal } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.department\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.department\\"))
];
const columns = [
    newAttribute(idRef(\\"label.stage.name.stagename\\", \\"displayForm\\"), a => a.localId(\\"a_label.stage.name.stagename\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const totals = [
    newTotal(\\"sum\\", \\"m_aangOxLSeztu\\", \\"a_label.product.id.name\\")
];
const config = {columnSizing: undefined};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                totals={totals}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - two measures 1`] = `
"import React from \\"react\\";
import { idRef, newMeasure } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const config = {columnSizing: undefined};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - two measures and grand totals and multiple subtotals 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newTotal } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.department\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.department\\"))
];
const columns = [
    newAttribute(idRef(\\"label.opportunitysnapshot.forecastcategory\\", \\"displayForm\\"), a => a.localId(\\"a_label.opportunitysnapshot.forecastcategory\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const totals = [
    newTotal(\\"sum\\", \\"m_aangOxLSeztu\\", \\"a_label.product.id.name\\"),
    newTotal(\\"min\\", \\"m_aangOxLSeztu\\", \\"a_label.product.id.name\\"),
    newTotal(\\"max\\", \\"m_acugFHNJgsBy\\", \\"a_label.product.id.name\\"),
    newTotal(\\"nat\\", \\"m_acugFHNJgsBy\\", \\"a_label.product.id.name\\"),
    newTotal(\\"sum\\", \\"m_aangOxLSeztu\\", \\"a_label.owner.department\\"),
    newTotal(\\"med\\", \\"m_aangOxLSeztu\\", \\"a_label.owner.department\\"),
    newTotal(\\"med\\", \\"m_acugFHNJgsBy\\", \\"a_label.owner.department\\"),
    newTotal(\\"nat\\", \\"m_acugFHNJgsBy\\", \\"a_label.owner.department\\")
];
const config = {columnSizing: undefined};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                totals={totals}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - two measures and multiple grand totals for each 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newTotal } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.department\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.department\\"))
];
const columns = [
    newAttribute(idRef(\\"label.opportunitysnapshot.forecastcategory\\", \\"displayForm\\"), a => a.localId(\\"a_label.opportunitysnapshot.forecastcategory\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const totals = [
    newTotal(\\"sum\\", \\"m_aangOxLSeztu\\", \\"a_label.product.id.name\\"),
    newTotal(\\"min\\", \\"m_aangOxLSeztu\\", \\"a_label.product.id.name\\"),
    newTotal(\\"max\\", \\"m_acugFHNJgsBy\\", \\"a_label.product.id.name\\"),
    newTotal(\\"nat\\", \\"m_acugFHNJgsBy\\", \\"a_label.product.id.name\\")
];
const config = {columnSizing: undefined};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                totals={totals}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - two measures and multiple subtotals 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newTotal } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.department\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.department\\"))
];
const columns = [
    newAttribute(idRef(\\"label.opportunitysnapshot.forecastcategory\\", \\"displayForm\\"), a => a.localId(\\"a_label.opportunitysnapshot.forecastcategory\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const totals = [
    newTotal(\\"sum\\", \\"m_aangOxLSeztu\\", \\"a_label.owner.department\\"),
    newTotal(\\"med\\", \\"m_aangOxLSeztu\\", \\"a_label.owner.department\\"),
    newTotal(\\"med\\", \\"m_acugFHNJgsBy\\", \\"a_label.owner.department\\"),
    newTotal(\\"nat\\", \\"m_acugFHNJgsBy\\", \\"a_label.owner.department\\")
];
const config = {columnSizing: undefined};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                totals={totals}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - two measures and one subtotal 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newTotal } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.department\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.department\\"))
];
const columns = [
    newAttribute(idRef(\\"label.opportunitysnapshot.forecastcategory\\", \\"displayForm\\"), a => a.localId(\\"a_label.opportunitysnapshot.forecastcategory\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const totals = [
    newTotal(\\"sum\\", \\"m_aangOxLSeztu\\", \\"a_label.owner.department\\")
];
const config = {columnSizing: undefined};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                totals={totals}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - two measures and single grand total for each 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newTotal } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.department\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.department\\"))
];
const columns = [
    newAttribute(idRef(\\"label.opportunitysnapshot.forecastcategory\\", \\"displayForm\\"), a => a.localId(\\"a_label.opportunitysnapshot.forecastcategory\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const totals = [
    newTotal(\\"sum\\", \\"m_aangOxLSeztu\\", \\"a_label.product.id.name\\"),
    newTotal(\\"sum\\", \\"m_acugFHNJgsBy\\", \\"a_label.product.id.name\\")
];
const config = {columnSizing: undefined};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                totals={totals}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - two measures and single grand total for one 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newTotal } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.department\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.department\\"))
];
const columns = [
    newAttribute(idRef(\\"label.opportunitysnapshot.forecastcategory\\", \\"displayForm\\"), a => a.localId(\\"a_label.opportunitysnapshot.forecastcategory\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const totals = [
    newTotal(\\"sum\\", \\"m_aangOxLSeztu\\", \\"a_label.product.id.name\\")
];
const config = {columnSizing: undefined};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                totals={totals}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - two measures with column attribute 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const columns = [
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const config = {columnSizing: undefined};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - two measures with row and column attributes 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const columns = [
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const config = {columnSizing: undefined};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - two measures with row attribute 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {columnSizing: undefined};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - two measures with single row attr sorted by first measure 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newMeasureSort } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const sortBy = [newMeasureSort(\\"m_aangOxLSeztu\\", \\"desc\\", [])];
const config = {columnSizing: undefined};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - two measures with single row attr sorted by second measure 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newMeasureSort } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const sortBy = [newMeasureSort(\\"m_acugFHNJgsBy\\", \\"desc\\", [])];
const config = {columnSizing: undefined};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                sortBy={sortBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - two measures with three rows and two column attributes 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.department\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.department\\")),
    newAttribute(idRef(\\"label.owner.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.id.name\\"))
];
const columns = [
    newAttribute(idRef(\\"label.opportunitysnapshot.forecastcategory\\", \\"displayForm\\"), a => a.localId(\\"a_label.opportunitysnapshot.forecastcategory\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const config = {columnSizing: undefined};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - two measures with two row and one column attributes 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.department\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.department\\"))
];
const columns = [
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const config = {columnSizing: undefined};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - two measures with two row and two column attributes 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.department\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.department\\"))
];
const columns = [
    newAttribute(idRef(\\"label.opportunitysnapshot.forecastcategory\\", \\"displayForm\\"), a => a.localId(\\"a_label.opportunitysnapshot.forecastcategory\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const config = {columnSizing: undefined};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - with attributes without measures 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const rows = [
    newAttribute(idRef(\\"label.stage.name.stagename\\", \\"displayForm\\"), a => a.localId(\\"a_label.stage.name.stagename\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const columns = [
    newAttribute(idRef(\\"label.owner.department\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.department\\"))
];
const config = {columnSizing: undefined};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                rows={rows}
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - with column attributes only and auto-resizing 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const columns = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {columnSizing: undefined};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - with date filter 1`] = `
"import React from \\"react\\";
import { idRef, newAbsoluteDateFilter, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.department\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.department\\"))
];
const columns = [
    newAttribute(idRef(\\"label.opportunitysnapshot.forecastcategory\\", \\"displayForm\\"), a => a.localId(\\"a_label.opportunitysnapshot.forecastcategory\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const filters = [
    newAbsoluteDateFilter(idRef(\\"activity.dataset.dt\\", \\"dataSet\\"), \\"2021-01-01\\", \\"2021-02-01\\")
];
const config = {columnSizing: undefined};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                filters={filters}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - with drill on all row atributes 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.department\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.department\\")),
    newAttribute(idRef(\\"label.owner.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.id.name\\"))
];
const columns = [
    newAttribute(idRef(\\"label.opportunitysnapshot.forecastcategory\\", \\"displayForm\\"), a => a.localId(\\"a_label.opportunitysnapshot.forecastcategory\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const config = {columnSizing: undefined};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - with drill on all row attributes and measures 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.department\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.department\\")),
    newAttribute(idRef(\\"label.owner.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.id.name\\"))
];
const columns = [
    newAttribute(idRef(\\"label.opportunitysnapshot.forecastcategory\\", \\"displayForm\\"), a => a.localId(\\"a_label.opportunitysnapshot.forecastcategory\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const config = {columnSizing: undefined};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - with small page and auto-resizing 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.department\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.department\\"))
];
const columns = [
    newAttribute(idRef(\\"label.stage.name.stagename\\", \\"displayForm\\"), a => a.localId(\\"a_label.stage.name.stagename\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const config = {columnSizing: undefined};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - with two measures and row attribute with auto-resizing 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {columnSizing: undefined};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - with two measures and row attribute with auto-resizing and grow to fit 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"))
];
const config = {columnSizing: undefined};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - with two measures, grand totals and subtotals with auto-resizing 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newTotal } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.department\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.department\\"))
];
const columns = [
    newAttribute(idRef(\\"label.opportunitysnapshot.forecastcategory\\", \\"displayForm\\"), a => a.localId(\\"a_label.opportunitysnapshot.forecastcategory\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const totals = [
    newTotal(\\"sum\\", \\"m_aangOxLSeztu\\", \\"a_label.product.id.name\\"),
    newTotal(\\"min\\", \\"m_aangOxLSeztu\\", \\"a_label.product.id.name\\"),
    newTotal(\\"max\\", \\"m_acugFHNJgsBy\\", \\"a_label.product.id.name\\"),
    newTotal(\\"nat\\", \\"m_acugFHNJgsBy\\", \\"a_label.product.id.name\\"),
    newTotal(\\"sum\\", \\"m_aangOxLSeztu\\", \\"a_label.owner.department\\"),
    newTotal(\\"med\\", \\"m_aangOxLSeztu\\", \\"a_label.owner.department\\"),
    newTotal(\\"med\\", \\"m_acugFHNJgsBy\\", \\"a_label.owner.department\\"),
    newTotal(\\"nat\\", \\"m_acugFHNJgsBy\\", \\"a_label.owner.department\\")
];
const config = {columnSizing: undefined};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                totals={totals}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - with two measures, grand totals and subtotals with auto-resizing and grow to fit 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newTotal } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const rows = [
    newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\")),
    newAttribute(idRef(\\"label.owner.department\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.department\\"))
];
const columns = [
    newAttribute(idRef(\\"label.opportunitysnapshot.forecastcategory\\", \\"displayForm\\"), a => a.localId(\\"a_label.opportunitysnapshot.forecastcategory\\")),
    newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"))
];
const totals = [
    newTotal(\\"sum\\", \\"m_aangOxLSeztu\\", \\"a_label.product.id.name\\"),
    newTotal(\\"min\\", \\"m_aangOxLSeztu\\", \\"a_label.product.id.name\\"),
    newTotal(\\"max\\", \\"m_acugFHNJgsBy\\", \\"a_label.product.id.name\\"),
    newTotal(\\"nat\\", \\"m_acugFHNJgsBy\\", \\"a_label.product.id.name\\"),
    newTotal(\\"sum\\", \\"m_aangOxLSeztu\\", \\"a_label.owner.department\\"),
    newTotal(\\"med\\", \\"m_aangOxLSeztu\\", \\"a_label.owner.department\\"),
    newTotal(\\"med\\", \\"m_acugFHNJgsBy\\", \\"a_label.owner.department\\"),
    newTotal(\\"nat\\", \\"m_acugFHNJgsBy\\", \\"a_label.owner.department\\")
];
const config = {columnSizing: undefined};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                measures={measures}
                rows={rows}
                columns={columns}
                totals={totals}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for PivotTable - with two same dates 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute } from \\"@gooddata/sdk-model\\";
import { PivotTable } from \\"@gooddata/sdk-ui-pivot\\";

const rows = [
    newAttribute(idRef(\\"created.aag81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aag81lMifn6q\\")),
    newAttribute(idRef(\\"created.aag81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aag81lMifn6q_1\\"))
];
const config = {columnSizing: undefined};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <PivotTable
                rows={rows}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ScatterPlot - Y axis min/max configuration 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ScatterPlot } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const attribute = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    xaxis: {max: \\"15000000\\", min: \\"5000000\\"},
    yaxis: {max: \\"0.55\\", min: \\"0.5\\"}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ScatterPlot
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                attribute={attribute}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ScatterPlot - assign color to measures 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ScatterPlot } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const attribute = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ScatterPlot
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                attribute={attribute}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ScatterPlot - axis name configuration - high 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ScatterPlot } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const attribute = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    secondary_xaxis: {name: {position: \\"right\\"}},
    secondary_yaxis: {name: {position: \\"top\\"}},
    xaxis: {name: {position: \\"right\\"}},
    yaxis: {name: {position: \\"top\\"}}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ScatterPlot
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                attribute={attribute}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ScatterPlot - axis name configuration - invisible 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ScatterPlot } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const attribute = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    secondary_xaxis: {name: {position: \\"center\\"}},
    secondary_yaxis: {name: {position: \\"center\\"}},
    xaxis: {name: {position: \\"center\\"}},
    yaxis: {name: {position: \\"center\\"}}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ScatterPlot
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                attribute={attribute}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ScatterPlot - axis name configuration - low 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ScatterPlot } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const attribute = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    secondary_xaxis: {name: {position: \\"left\\"}},
    secondary_yaxis: {name: {position: \\"bottom\\"}},
    xaxis: {name: {position: \\"left\\"}},
    yaxis: {name: {position: \\"bottom\\"}}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ScatterPlot
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                attribute={attribute}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ScatterPlot - axis name configuration - middle 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ScatterPlot } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const attribute = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {
    secondary_xaxis: {name: {position: \\"center\\"}},
    secondary_yaxis: {name: {position: \\"center\\"}},
    xaxis: {name: {position: \\"center\\"}},
    yaxis: {name: {position: \\"center\\"}}
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ScatterPlot
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                attribute={attribute}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ScatterPlot - coloring - custom palette 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ScatterPlot } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const attribute = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ScatterPlot
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                attribute={attribute}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ScatterPlot - data labels - auto visibility 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ScatterPlot } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const attribute = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {dataLabels: {visible: \\"auto\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ScatterPlot
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                attribute={attribute}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ScatterPlot - data labels - default 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ScatterPlot } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const attribute = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ScatterPlot
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                attribute={attribute}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ScatterPlot - data labels - forced hidden 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ScatterPlot } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const attribute = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {dataLabels: {visible: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ScatterPlot
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                attribute={attribute}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ScatterPlot - data labels - forced visible 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ScatterPlot } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const attribute = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {dataLabels: {visible: true}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ScatterPlot
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                attribute={attribute}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ScatterPlot - data labels - forced visible and german separators 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ScatterPlot } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const attribute = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const config = {dataLabels: {visible: true}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ScatterPlot
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                attribute={attribute}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ScatterPlot - font 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ScatterPlot } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const attribute = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ScatterPlot
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                attribute={attribute}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ScatterPlot - themed 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ScatterPlot } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const attribute = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ScatterPlot
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                attribute={attribute}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ScatterPlot - x and y axis measures and attribute 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ScatterPlot } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const attribute = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ScatterPlot
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                attribute={attribute}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ScatterPlot - x and y axis measures and attribute with attr sorting 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newAttributeSort, newMeasure } from \\"@gooddata/sdk-model\\";
import { ScatterPlot } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const attribute = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const sortBy = [
    newAttributeSort(\\"a_label.product.id.name\\", \\"desc\\")
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ScatterPlot
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                attribute={attribute}
                sortBy={sortBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ScatterPlot - x and y axis measures and attribute with nulls in data 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ScatterPlot } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const yAxisMeasure = newMeasure(idRef(\\"abZgFKGPaGYM\\", \\"measure\\"), m => m.localId(\\"m_abZgFKGPaGYM\\"));
const attribute = newAttribute(idRef(\\"closed.aag81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_closed.aag81lMifn6q\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ScatterPlot
                xAxisMeasure={xAxisMeasure}
                yAxisMeasure={yAxisMeasure}
                attribute={attribute}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ScatterPlot - x axis measure 1`] = `
"import React from \\"react\\";
import { idRef, newMeasure } from \\"@gooddata/sdk-model\\";
import { ScatterPlot } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ScatterPlot
                xAxisMeasure={xAxisMeasure}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ScatterPlot - x axis measure and attribute 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ScatterPlot } from \\"@gooddata/sdk-ui-charts\\";

const xAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const attribute = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ScatterPlot
                xAxisMeasure={xAxisMeasure}
                attribute={attribute}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for ScatterPlot - y axis measure and attribute 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { ScatterPlot } from \\"@gooddata/sdk-ui-charts\\";

const yAxisMeasure = newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"));
const attribute = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <ScatterPlot
                yAxisMeasure={yAxisMeasure}
                attribute={attribute}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - 180x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - 180x300 - Force position TOP, max 2 rows, Gradient legend minimized - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - 260x154 - Force position TOP, max 1 row, Gradient legend minimized - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - 440x154 - Force position TOP, max 1 row, Gradient legend normal - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - 440x154 - Force position TOP, max 1 row, Gradient legend normal - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - 610x154 - Force position RIGHT - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - 610x154 - Force position RIGHT - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - 610x154 - Force position RIGHT - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - 610x154 - Force position RIGHT - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - 610x154 - Force position RIGHT - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - 610x194 - Position respects configuration, max 1 row for TOP/BOTTOM - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - 610x274 - Position respects configuration, max 2 row for TOP/BOTTOM - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const config = {
    legend: {
        position: \\"auto\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const config = {
    legend: {
        position: \\"bottom\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const config = {
    legend: {
        position: \\"left\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const config = {
    legend: {
        position: \\"right\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - 650x354 - Position respects configuration, map legend fits into 1 row for TOP/BOTTOM - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const config = {
    legend: {
        position: \\"top\\",
        responsive: \\"autoPositionWithPopup\\"
    }
};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - arithmetic measures and segment 1`] = `
"import React from \\"react\\";
import { idRef, newArithmeticMeasure, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\")),
    newArithmeticMeasure([\\"m_aangOxLSeztu\\", \\"m_acugFHNJgsBy\\"], \\"difference\\", m => m.alias(\\"Calculated 'Lost' measure\\").localId(\\"m_f72796b0fbc7c0dc4d17a1e68c1a9933\\"))
];
const segmentBy = newAttribute(idRef(\\"created.aci81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aci81lMifn6q\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                segmentBy={segmentBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - assign color to attributes 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - coloring - custom palette 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - data labels - auto visibility 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const config = {dataLabels: {visible: \\"auto\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - data labels - default 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - data labels - forced hidden 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const config = {dataLabels: {visible: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - data labels - forced visible 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const config = {dataLabels: {visible: true}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - data labels - forced visible and german separators 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const config = {dataLabels: {visible: true}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - font 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - legend position - auto legend 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const config = {legend: {position: \\"auto\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - legend position - disabled 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const config = {legend: {enabled: false}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - legend position - legend at bottom 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const config = {legend: {position: \\"bottom\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - legend position - legend on left 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const config = {legend: {position: \\"left\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - legend position - legend on right 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const config = {legend: {position: \\"right\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - legend position - legend on top 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const config = {legend: {position: \\"top\\"}};
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
                config={config}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - single measure 1`] = `
"import React from \\"react\\";
import { idRef, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - single measure and segment 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                segmentBy={segmentBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - single measure and viewBy 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - single measure and viewBy filtered to one element 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure, newPositiveAttributeFilter } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const filters = [
    newPositiveAttributeFilter(idRef(\\"label.product.id.name\\", \\"displayForm\\"), {values: [\\"CompuSci\\"]})
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                filters={filters}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - single measure, viewBy and segment 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - themed 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const segmentBy = newAttribute(idRef(\\"label.owner.region\\", \\"displayForm\\"), a => a.localId(\\"a_label.owner.region\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - two measures 1`] = `
"import React from \\"react\\";
import { idRef, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - two measures and segmentBy 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const segmentBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                segmentBy={segmentBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - two measures and viewBy 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\")),
    newMeasure(idRef(\\"acugFHNJgsBy\\", \\"measure\\"), m => m.localId(\\"m_acugFHNJgsBy\\"))
];
const viewBy = newAttribute(idRef(\\"label.product.id.name\\", \\"displayForm\\"), a => a.localId(\\"a_label.product.id.name\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Treemap - with one measure and view by date and segment by date 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Treemap } from \\"@gooddata/sdk-ui-charts\\";

const measures = [
    newMeasure(idRef(\\"aangOxLSeztu\\", \\"measure\\"), m => m.localId(\\"m_aangOxLSeztu\\"))
];
const viewBy = newAttribute(idRef(\\"closed.aag81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_closed.aag81lMifn6q\\"));
const segmentBy = newAttribute(idRef(\\"created.aag81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_created.aag81lMifn6q\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Treemap
                measures={measures}
                viewBy={viewBy}
                segmentBy={segmentBy}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Xirr - correct config 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Xirr } from \\"@gooddata/sdk-ui-charts\\";

const measure = newMeasure(idRef(\\"aadpHDMBecIy\\", \\"measure\\"), m => m.localId(\\"m_aadpHDMBecIy\\"));
const attribute = newAttribute(idRef(\\"timeline.aag81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_timeline.aag81lMifn6q\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Xirr
                measure={measure}
                attribute={attribute}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Xirr - font 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Xirr } from \\"@gooddata/sdk-ui-charts\\";

const measure = newMeasure(idRef(\\"aadpHDMBecIy\\", \\"measure\\"), m => m.localId(\\"m_aadpHDMBecIy\\"));
const attribute = newAttribute(idRef(\\"timeline.aag81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_timeline.aag81lMifn6q\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Xirr
                measure={measure}
                attribute={attribute}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Xirr - only measure 1`] = `
"import React from \\"react\\";
import { idRef, newMeasure } from \\"@gooddata/sdk-model\\";
import { Xirr } from \\"@gooddata/sdk-ui-charts\\";

const measure = newMeasure(idRef(\\"aadpHDMBecIy\\", \\"measure\\"), m => m.localId(\\"m_aadpHDMBecIy\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Xirr
                measure={measure}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Xirr - semantically wrong measure 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Xirr } from \\"@gooddata/sdk-ui-charts\\";

const measure = newMeasure(idRef(\\"abYgDBRagANw\\", \\"measure\\"), m => m.localId(\\"m_abYgDBRagANw\\"));
const attribute = newAttribute(idRef(\\"timeline.aag81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_timeline.aag81lMifn6q\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Xirr
                measure={measure}
                attribute={attribute}
            />
        </div>
    );
}
"
`;

exports[`getEmbeddingCode functionality should generate code for Xirr - themed 1`] = `
"import React from \\"react\\";
import { idRef, newAttribute, newMeasure } from \\"@gooddata/sdk-model\\";
import { Xirr } from \\"@gooddata/sdk-ui-charts\\";

const measure = newMeasure(idRef(\\"aadpHDMBecIy\\", \\"measure\\"), m => m.localId(\\"m_aadpHDMBecIy\\"));
const attribute = newAttribute(idRef(\\"timeline.aag81lMifn6q\\", \\"displayForm\\"), a => a.localId(\\"a_timeline.aag81lMifn6q\\"));
const style = { height: 400 };

function MyComponent() {
    return (
        <div style={style}>
            <Xirr
                measure={measure}
                attribute={attribute}
            />
        </div>
    );
}
"
`;
