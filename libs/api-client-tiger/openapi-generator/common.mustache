/* tslint:disable */
/* eslint-disable */
{{>licenseInfo}}

import globalImportQs from 'qs';
import { RequiredError } from "./base";

/**
 *
 * @throws {RequiredError}
 * @export
 */
export const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {
    if (paramValue === null || paramValue === undefined) {
        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);
    }
}

{{!
    This converts objects like
    {
        filter: {
            title: {
                like: "foo"
            }
        }
    }
    to roughly
    { "filter.title.like": "foo" }
    and assigns it to a given target object.
    So given the example object and localVarQueryParameter as target, it is equivalent to doing

    localVarQueryParameter["filter.title.like"] = "foo";

    This is needed because the url parser does not support nested objects.
}}
/**
 * Utility function that adds support for nested objects in query
 */
export const addFlattenedObjectTo = function (object: any, target: any): void {
    const flattened = globalImportQs.parse(globalImportQs.stringify(object, { allowDots: true }), {
        depth: 0,
    });
    Object.keys(flattened).forEach((key) => {
        target[key] = (flattened as any)[key];
    });
};